2016-10-24T14:33:10.477Z - info: Logging durch Winston ist konfiguriert
2016-10-24T14:33:10.780Z - info: Node v6.7.0
2016-10-24T14:33:10.781Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-24T14:33:10.819Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-24T14:33:10.837Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:10.838Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-24T14:33:10.838Z - debug: Request: protocol="http"
2016-10-24T14:33:10.839Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:10.868Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:10.871Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-24T14:33:10.872Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-24T14:33:10.873Z - debug: body: {"username":"admin","password":"p"}
2016-10-24T14:33:10.873Z - debug: username: admin
2016-10-24T14:33:10.873Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-24T14:33:10.873Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:10.873Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:10.873Z - debug: password: p
2016-10-24T14:33:10.873Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-24T14:33:10.876Z - debug: < IamService.checkPassword(): result = {}
2016-10-24T14:33:10.876Z - debug: < IamService.login(): result = {}
2016-10-24T14:33:10.876Z - debug: < IamRequestHandler.login(): result = {}
2016-10-24T14:33:11.269Z - debug: result: true
2016-10-24T14:33:11.271Z - debug: payload: {"iat":1477319591,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"07c07245-a24d-4ef8-bc26-4406cdea54b4","exp":1477405991}
2016-10-24T14:33:11.279Z - debug: Response time: 441.995101 ms
2016-10-24T14:33:11.298Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.299Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.299Z - debug: Request: protocol="http"
2016-10-24T14:33:11.299Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.302Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:11.303Z - debug: queryParams = {}
2016-10-24T14:33:11.303Z - debug: > BuecherService.find(): args = [{}]
2016-10-24T14:33:11.307Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:11.308Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:11.308Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.326Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:11.335Z - debug: Response time: 36.393428 ms
2016-10-24T14:33:11.352Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.352Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.352Z - debug: Request: protocol="http"
2016-10-24T14:33:11.352Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.356Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:11.356Z - debug: id = 000000000000000000000001
2016-10-24T14:33:11.357Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:11.357Z - debug: > BuecherService.findById(): args = ["000000000000000000000001"]
2016-10-24T14:33:11.359Z - debug: < BuecherService.findById(): result = {}
2016-10-24T14:33:11.359Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-24T14:33:11.359Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:11.359Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.364Z - debug: getById(): buch = {"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]}
2016-10-24T14:33:11.365Z - debug: Response time: 12.791113 ms
2016-10-24T14:33:11.373Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.373Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.373Z - debug: Request: protocol="http"
2016-10-24T14:33:11.374Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.376Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:11.377Z - debug: id = 000000000000000000000999
2016-10-24T14:33:11.377Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:11.377Z - debug: > BuecherService.findById(): args = ["000000000000000000000999"]
2016-10-24T14:33:11.377Z - debug: < BuecherService.findById(): result = {}
2016-10-24T14:33:11.377Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-24T14:33:11.378Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:11.378Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.389Z - debug: status = 404
2016-10-24T14:33:11.390Z - debug: Response time: 16.424298 ms
2016-10-24T14:33:11.399Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.399Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.399Z - debug: Request: protocol="http"
2016-10-24T14:33:11.399Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.402Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:11.402Z - debug: queryParams = {"titel":"a"}
2016-10-24T14:33:11.403Z - debug: > BuecherService.find(): args = [{"titel":"a"}]
2016-10-24T14:33:11.404Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:11.404Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:11.404Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.417Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:11.419Z - debug: Response time: 20.306924 ms
2016-10-24T14:33:11.428Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.428Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.429Z - debug: Request: protocol="http"
2016-10-24T14:33:11.429Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.429Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:11.430Z - debug: queryParams = {"titel":"XX"}
2016-10-24T14:33:11.430Z - debug: > BuecherService.find(): args = [{"titel":"XX"}]
2016-10-24T14:33:11.430Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:11.430Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:11.430Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.432Z - debug: getByQuery(): buecher = []
2016-10-24T14:33:11.432Z - debug: status = 404
2016-10-24T14:33:11.432Z - debug: Response time: 4.0691489999999995 ms
2016-10-24T14:33:11.439Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.439Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.439Z - debug: Request: protocol="http"
2016-10-24T14:33:11.440Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.442Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:11.442Z - debug: queryParams = {"javascript":"true"}
2016-10-24T14:33:11.442Z - debug: > BuecherService.find(): args = [{"javascript":"true"}]
2016-10-24T14:33:11.443Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:11.443Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:11.443Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.448Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:11.448Z - debug: Response time: 9.505986 ms
2016-10-24T14:33:11.455Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.455Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.455Z - debug: Request: protocol="http"
2016-10-24T14:33:11.456Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.459Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:11.459Z - debug: queryParams = {"csharp":"true"}
2016-10-24T14:33:11.459Z - debug: > BuecherService.find(): args = [{"csharp":"true"}]
2016-10-24T14:33:11.460Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:11.460Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:11.460Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.462Z - debug: getByQuery(): buecher = []
2016-10-24T14:33:11.463Z - debug: status = 404
2016-10-24T14:33:11.463Z - debug: Response time: 7.932587 ms
2016-10-24T14:33:11.470Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.470Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:11.470Z - debug: Request: protocol="http"
2016-10-24T14:33:11.471Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.473Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.473Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.474Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.478Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.478Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.478Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.478Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.478Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.479Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.479Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.479Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.479Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.479Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.480Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.480Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.481Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.481Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.481Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.482Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.482Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.482Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.482Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.482Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.482Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.482Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.482Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.483Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.483Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.483Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.483Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.483Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.484Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.484Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.484Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.485Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:11.494Z - debug: Body: {"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1ba7e816d619e0ddb30f","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:11.495Z - debug: > BuecherService.save(): args = [{"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1ba7e816d619e0ddb30f","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-24T14:33:11.495Z - debug: < BuecherService.save(): result = {}
2016-10-24T14:33:11.496Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:11.517Z - debug: sendMail(): {"from":"\"Joe Doe\" <nnvv0011@hs-karlsruhe.de>","to":"joe@doe.mail","subject":"Neues Buch 580e1ba7e816d619e0ddb30f","html":"Das Buch mit dem Titel <strong>Neu</strong> ist angelegt"}
2016-10-24T14:33:11.532Z - debug: post(): location = http://127.0.0.1:8443/buecher/580e1ba7e816d619e0ddb30f
2016-10-24T14:33:11.533Z - debug: Response time: 63.360744999999994 ms
2016-10-24T14:33:11.541Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.543Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "232",
  "connection": "close"
}
2016-10-24T14:33:11.543Z - debug: Request: protocol="http"
2016-10-24T14:33:11.543Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.544Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.544Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.544Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.545Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.545Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.545Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.545Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.545Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.545Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.545Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.545Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.545Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.545Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.545Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.545Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.545Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.545Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.546Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.546Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.546Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.546Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.546Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.546Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.546Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.546Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.546Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.546Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.546Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.546Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.546Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.546Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.547Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.547Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.547Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.547Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:11.548Z - debug: Body: {"titel":"Blabla","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","_id":"580e1ba7e816d619e0ddb310","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:11.549Z - debug: status = 400
2016-10-24T14:33:11.549Z - debug: Response time: 8.046375 ms
2016-10-24T14:33:11.549Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:11.554Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.554Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "267",
  "connection": "close"
}
2016-10-24T14:33:11.554Z - debug: Request: protocol="http"
2016-10-24T14:33:11.554Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.556Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.556Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.556Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.556Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.556Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.556Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.556Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.556Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.557Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.557Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.557Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.557Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.557Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.557Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.557Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.557Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.557Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.557Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.557Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.557Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.557Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.557Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.557Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.557Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.557Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.558Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.558Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.558Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.558Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.558Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.558Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.559Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.559Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.559Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.559Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:11.560Z - debug: Body: {"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1ba7e816d619e0ddb311","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:11.561Z - debug: > BuecherService.save(): args = [{"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1ba7e816d619e0ddb311","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-24T14:33:11.561Z - debug: < BuecherService.save(): result = {}
2016-10-24T14:33:11.561Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:11.565Z - debug: TitelExistsError.constructor(): Der Titel "Alpha" existiert bereits.
2016-10-24T14:33:11.567Z - debug: Response time: 12.885712999999999 ms
2016-10-24T14:33:11.574Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.574Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:11.574Z - debug: Request: protocol="http"
2016-10-24T14:33:11.574Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.575Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.576Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.576Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:11.576Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:11.576Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:11.576Z - debug: Response time: 2.605523 ms
2016-10-24T14:33:11.577Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.577Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.581Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.582Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:11.582Z - debug: Request: protocol="http"
2016-10-24T14:33:11.582Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.583Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.583Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.584Z - debug: Authorization = Bearer x
2016-10-24T14:33:11.585Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.585Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:11.585Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.586Z - debug: Response time: 4.145900999999999 ms
2016-10-24T14:33:11.586Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.587Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.593Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.593Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:11.593Z - debug: Request: protocol="http"
2016-10-24T14:33:11.593Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.594Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.594Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.594Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.595Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.595Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.595Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.595Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.595Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.595Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.595Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.595Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.595Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.595Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.595Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.595Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.596Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.596Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.596Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.596Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.596Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.596Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.596Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.596Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.596Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.596Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.596Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.597Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.597Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.597Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.597Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.597Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.597Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.597Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.597Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.597Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:11.600Z - debug: Body: {"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-24T14:33:11.600Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-24T14:33:11.601Z - debug: < BuecherService.update(): result = {}
2016-10-24T14:33:11.601Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:11.614Z - debug: Response time: 20.753152 ms
2016-10-24T14:33:11.618Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.619Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "296",
  "connection": "close"
}
2016-10-24T14:33:11.619Z - debug: Request: protocol="http"
2016-10-24T14:33:11.619Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.621Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.621Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.621Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.622Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.622Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.622Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.622Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.622Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.622Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.622Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.622Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.622Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.622Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.622Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.623Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.623Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.623Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.623Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.623Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.623Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.623Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.623Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.624Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.624Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.624Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.624Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.624Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.624Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.624Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.624Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.624Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.625Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.625Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.627Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.627Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:11.630Z - debug: Body: {"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-24T14:33:11.630Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-24T14:33:11.631Z - debug: < BuecherService.update(): result = {}
2016-10-24T14:33:11.631Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:11.634Z - debug: IdNotExistsError.constructor(): Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-24T14:33:11.634Z - debug: status = 400, message: Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-24T14:33:11.635Z - debug: Response time: 16.232867 ms
2016-10-24T14:33:11.641Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.641Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "content-type": "application/json",
  "content-length": "272",
  "connection": "close"
}
2016-10-24T14:33:11.641Z - debug: Request: protocol="http"
2016-10-24T14:33:11.641Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.643Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.643Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.643Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.646Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.646Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.646Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.646Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.646Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:11.646Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.646Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:11.646Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.647Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.647Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.647Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.648Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.648Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:11.648Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.648Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.648Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.648Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.648Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:11.648Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.652Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.652Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:11.652Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:11.652Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:11.653Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.655Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:11.655Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.655Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.655Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.655Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:11.656Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.656Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.657Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:11.659Z - debug: Body: {"_id":"000000000000000000000003","titel":"Alpha","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","__v":0,"autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:11.659Z - debug: status = 400, err: {"art":"Die Art eines Buches muss KINDLE oder DRUCKAUSGABE sein","rating":"-1 ist keine gueltige Bewertung","verlag":"Der Verlag eines Buches muss IWI_VERLAG oder HSKA_VERLAG sein","email":"fromNowhere ist keine gueltige Email-Adresse"}
2016-10-24T14:33:11.660Z - debug: Response time: 19.00394 ms
2016-10-24T14:33:11.660Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:11.664Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.664Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:11.664Z - debug: Request: protocol="http"
2016-10-24T14:33:11.664Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.665Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.665Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.665Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:11.665Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:11.665Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:11.665Z - debug: Response time: 1.614898 ms
2016-10-24T14:33:11.666Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.666Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.669Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.670Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:11.670Z - debug: Request: protocol="http"
2016-10-24T14:33:11.670Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.671Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.671Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.671Z - debug: Authorization = Bearer x
2016-10-24T14:33:11.671Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.671Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:11.671Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.672Z - debug: Response time: 2.331985 ms
2016-10-24T14:33:11.673Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.673Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.685Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.685Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q",
  "connection": "close"
}
2016-10-24T14:33:11.685Z - debug: Request: protocol="http"
2016-10-24T14:33:11.685Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.686Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:11.687Z - debug: id = 000000000000000000000005
2016-10-24T14:33:11.687Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.687Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.687Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTEsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMDdjMDcyNDUtYTI0ZC00ZWY4LWJjMjYtNDQwNmNkZWE1NGI0IiwiZXhwIjoxNDc3NDA1OTkxfQ.lM52_QmuQinlgMulFp_DFkMz7Wk4RikgkcmuTrNiKgBqeVl6hz9ymnyux6s3-WyFsZQcODDG3zKFkEMfBP43p4Lu8J7WHNSJwtqzoEr8bCLtNVVBDOJzC-Is9kQUT6qpq9_ANWiNcskxhMtoRr8SJ7kXrt9-YvTYaqLci_Pyj9_MDGQqXIYZcM0ZZul2YvNxVBEK91TLoIzhzHSrwpsUSrddp7llzacRCmukVdwLOG7ur13PlajKoUOxw3mBcWhOCWmGliDk8rcSk_Oa3EmjGEN-tvh4c2vQ0r1C923ZGCVewFd_zAguBhAN0Ty7hBKm8GmmQojUTMsPXYbpFKTT2Q
2016-10-24T14:33:11.687Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.687Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.687Z - debug: id: 200000000000000000000001
2016-10-24T14:33:11.687Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:11.687Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-24T14:33:11.688Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:11.688Z - debug: Rollen = ["admin"]
2016-10-24T14:33:11.688Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:11.688Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:11.688Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:11.688Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:11.688Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:11.689Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-24T14:33:11.689Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:11.689Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:11.689Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:11.689Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:11.690Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-24T14:33:11.690Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-24T14:33:11.690Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:11.690Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:11.690Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:11.691Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:11.691Z - debug: > BuecherRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-24T14:33:11.691Z - debug: id = 000000000000000000000005
2016-10-24T14:33:11.691Z - debug: > BuecherService.remove(): args = ["000000000000000000000005"]
2016-10-24T14:33:11.692Z - debug: < BuecherService.remove(): result = {}
2016-10-24T14:33:11.692Z - debug: < BuecherRequestHandler.deleteMeth(): result = {}
2016-10-24T14:33:11.692Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-24T14:33:11.692Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.692Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:11.692Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.694Z - debug: Response time: 8.559982999999999 ms
2016-10-24T14:33:11.696Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]}
2016-10-24T14:33:11.701Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.702Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:11.702Z - debug: Request: protocol="http"
2016-10-24T14:33:11.702Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.702Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:11.703Z - debug: id = 000000000000000000000005
2016-10-24T14:33:11.703Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.703Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.703Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:11.703Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:11.703Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:11.703Z - debug: Response time: 1.761706 ms
2016-10-24T14:33:11.703Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.704Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:11.704Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:11.707Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:11.708Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-24T14:33:11.708Z - debug: Request: protocol="http"
2016-10-24T14:33:11.708Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:11.709Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:11.709Z - debug: id = 000000000000000000000005
2016-10-24T14:33:11.709Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.709Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:11.709Z - debug: Authorization = Bearer x
2016-10-24T14:33:11.709Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.709Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:11.709Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:11.710Z - debug: Response time: 2.288701 ms
2016-10-24T14:33:11.710Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:11.710Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:11.710Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:13.254Z - info: Logging durch Winston ist konfiguriert
2016-10-24T14:33:13.549Z - info: Node v6.7.0
2016-10-24T14:33:13.549Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-24T14:33:13.588Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-24T14:33:13.602Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:13.603Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-24T14:33:13.603Z - debug: Request: protocol="http"
2016-10-24T14:33:13.604Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:13.632Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:13.635Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-24T14:33:13.636Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-24T14:33:13.637Z - debug: body: {"username":"admin","password":"p"}
2016-10-24T14:33:13.637Z - debug: username: admin
2016-10-24T14:33:13.637Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-24T14:33:13.637Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:13.637Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:13.638Z - debug: password: p
2016-10-24T14:33:13.638Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-24T14:33:13.640Z - debug: < IamService.checkPassword(): result = {}
2016-10-24T14:33:13.640Z - debug: < IamService.login(): result = {}
2016-10-24T14:33:13.641Z - debug: < IamRequestHandler.login(): result = {}
2016-10-24T14:33:14.030Z - debug: result: true
2016-10-24T14:33:14.031Z - debug: payload: {"iat":1477319594,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"6002798f-0744-4c50-8ecf-35fdbca431bf","exp":1477405994}
2016-10-24T14:33:14.038Z - debug: Response time: 436.626984 ms
2016-10-24T14:33:14.057Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.058Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:14.058Z - debug: Request: protocol="http"
2016-10-24T14:33:14.058Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.059Z - debug: > FilmeRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:14.060Z - debug: queryParams = {}
2016-10-24T14:33:14.060Z - debug: > FilmeService.find(): args = [{}]
2016-10-24T14:33:14.064Z - debug: < FilmeService.find(): result = {}
2016-10-24T14:33:14.064Z - debug: < FilmeRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:14.064Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.084Z - debug: getByQuery(): filme = [{"_id":"000000000000000000000002","titel":"Bad Neighbors","rating":4,"genre":"Komödie","laenge":97,"sprache":"Deutsch","medium":"Blu-Ray","preis":1.99,"ausgeliehen":false,"erscheinungsdatum":"2014-05-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Zac","nachname":"Efron"},{"vorname":"Seth","nachname":"Rogen"},{"vorname":"Dave","nachname":"Franco"}]},{"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]},{"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]},{"_id":"000000000000000000000004","titel":"Interstellar","rating":4.5,"genre":"Sci-Fi","laenge":169,"sprache":"Deutsch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2014-11-06T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Matthew","nachname":"McConaughey"},{"vorname":"Anne","nachname":"Hathaway"},{"vorname":"Jessica","nachname":"Chastain"}]},{"_id":"000000000000000000000003","titel":"Zombieworld","rating":2,"genre":"Horror","laenge":89,"sprache":"Deutsch","medium":"DVD","preis":0.49,"ausgeliehen":false,"erscheinungsdatum":"2010-01-29T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Janette","nachname":"Armand"},{"vorname":"Russell","nachname":"Hodgkinson"}]}]
2016-10-24T14:33:14.091Z - debug: Response time: 33.683934 ms
2016-10-24T14:33:14.107Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.107Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:14.108Z - debug: Request: protocol="http"
2016-10-24T14:33:14.108Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.111Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:14.111Z - debug: id = 000000000000000000000001
2016-10-24T14:33:14.111Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:14.112Z - debug: > FilmeService.findById(): args = ["000000000000000000000001"]
2016-10-24T14:33:14.113Z - debug: < FilmeService.findById(): result = {}
2016-10-24T14:33:14.113Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-24T14:33:14.113Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:14.113Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.118Z - debug: getById(): film = {"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]}
2016-10-24T14:33:14.118Z - debug: Response time: 11.23601 ms
2016-10-24T14:33:14.124Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.124Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:14.124Z - debug: Request: protocol="http"
2016-10-24T14:33:14.124Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.127Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:14.127Z - debug: id = 000000000000000000000999
2016-10-24T14:33:14.127Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:14.127Z - debug: > FilmeService.findById(): args = ["000000000000000000000999"]
2016-10-24T14:33:14.128Z - debug: < FilmeService.findById(): result = {}
2016-10-24T14:33:14.128Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-24T14:33:14.128Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:14.128Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.130Z - debug: status = 404
2016-10-24T14:33:14.131Z - debug: Response time: 6.5582069999999995 ms
2016-10-24T14:33:14.137Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.137Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjAwMjc5OGYtMDc0NC00YzUwLThlY2YtMzVmZGJjYTQzMWJmIiwiZXhwIjoxNDc3NDA1OTk0fQ.m3UXn-ANHA-r1xBP7xmn72cm9gqZTIa2z02ZLuaQh_madc3edRQ_sjcCxAsHUAdbqcs_Gf7_czNswjyUwGAP6Ve5mzkZfAmo6FMKrWBgiXoor3W87qkts0fZMSgScau5YitPUzlpj-2THuAaReeWmeDZD9FW9391UFFrEADr7zUfamiHzwktv-T3W9XHPNL8kLnVyzCXnzEqKb_VWcJIn_GMvgoVbzqUiGvvdc5XsosFSnh3ljOztTulhB5Lx1WaNmTTy9oJt9axxciiTmXnAUYaaz7v8SB73f6zrHdTN2-XWrbeU9SXA8BXxvBRDMNbV-flhi0SKIvdj6YHjs4fqA",
  "content-type": "application/json",
  "content-length": "123",
  "connection": "close"
}
2016-10-24T14:33:14.137Z - debug: Request: protocol="http"
2016-10-24T14:33:14.138Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.139Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.140Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.140Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjAwMjc5OGYtMDc0NC00YzUwLThlY2YtMzVmZGJjYTQzMWJmIiwiZXhwIjoxNDc3NDA1OTk0fQ.m3UXn-ANHA-r1xBP7xmn72cm9gqZTIa2z02ZLuaQh_madc3edRQ_sjcCxAsHUAdbqcs_Gf7_czNswjyUwGAP6Ve5mzkZfAmo6FMKrWBgiXoor3W87qkts0fZMSgScau5YitPUzlpj-2THuAaReeWmeDZD9FW9391UFFrEADr7zUfamiHzwktv-T3W9XHPNL8kLnVyzCXnzEqKb_VWcJIn_GMvgoVbzqUiGvvdc5XsosFSnh3ljOztTulhB5Lx1WaNmTTy9oJt9axxciiTmXnAUYaaz7v8SB73f6zrHdTN2-XWrbeU9SXA8BXxvBRDMNbV-flhi0SKIvdj6YHjs4fqA
2016-10-24T14:33:14.142Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:14.143Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:14.143Z - debug: id: 200000000000000000000001
2016-10-24T14:33:14.143Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:14.143Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:14.143Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:14.144Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:14.144Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:14.145Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:14.145Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:14.145Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:14.145Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:14.145Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:14.146Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:14.146Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:14.146Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:14.146Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:14.146Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:14.146Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:14.146Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:14.146Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:14.146Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:14.148Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:14.149Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:14.149Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:14.149Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:14.149Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:14.149Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:14.150Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:14.150Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:14.150Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.151Z - debug: > FilmeRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:14.158Z - debug: Body: {"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"580e1baa2bfe491b901d8210","schauspieler":[]}
2016-10-24T14:33:14.159Z - debug: > FilmeService.save(): args = [{"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"580e1baa2bfe491b901d8210","schauspieler":[]}]
2016-10-24T14:33:14.160Z - debug: < FilmeService.save(): result = {}
2016-10-24T14:33:14.160Z - debug: < FilmeRequestHandler.post(): result = {}
2016-10-24T14:33:14.185Z - debug: post(): location = http://127.0.0.1:8443/filme/580e1baa2bfe491b901d8210
2016-10-24T14:33:14.186Z - debug: Response time: 49.205514 ms
2016-10-24T14:33:14.195Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.196Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjAwMjc5OGYtMDc0NC00YzUwLThlY2YtMzVmZGJjYTQzMWJmIiwiZXhwIjoxNDc3NDA1OTk0fQ.m3UXn-ANHA-r1xBP7xmn72cm9gqZTIa2z02ZLuaQh_madc3edRQ_sjcCxAsHUAdbqcs_Gf7_czNswjyUwGAP6Ve5mzkZfAmo6FMKrWBgiXoor3W87qkts0fZMSgScau5YitPUzlpj-2THuAaReeWmeDZD9FW9391UFFrEADr7zUfamiHzwktv-T3W9XHPNL8kLnVyzCXnzEqKb_VWcJIn_GMvgoVbzqUiGvvdc5XsosFSnh3ljOztTulhB5Lx1WaNmTTy9oJt9axxciiTmXnAUYaaz7v8SB73f6zrHdTN2-XWrbeU9SXA8BXxvBRDMNbV-flhi0SKIvdj6YHjs4fqA",
  "connection": "close"
}
2016-10-24T14:33:14.196Z - debug: Request: protocol="http"
2016-10-24T14:33:14.196Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.197Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:14.197Z - debug: id = 000000000000000000000005
2016-10-24T14:33:14.197Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.197Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.197Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk1OTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjAwMjc5OGYtMDc0NC00YzUwLThlY2YtMzVmZGJjYTQzMWJmIiwiZXhwIjoxNDc3NDA1OTk0fQ.m3UXn-ANHA-r1xBP7xmn72cm9gqZTIa2z02ZLuaQh_madc3edRQ_sjcCxAsHUAdbqcs_Gf7_czNswjyUwGAP6Ve5mzkZfAmo6FMKrWBgiXoor3W87qkts0fZMSgScau5YitPUzlpj-2THuAaReeWmeDZD9FW9391UFFrEADr7zUfamiHzwktv-T3W9XHPNL8kLnVyzCXnzEqKb_VWcJIn_GMvgoVbzqUiGvvdc5XsosFSnh3ljOztTulhB5Lx1WaNmTTy9oJt9axxciiTmXnAUYaaz7v8SB73f6zrHdTN2-XWrbeU9SXA8BXxvBRDMNbV-flhi0SKIvdj6YHjs4fqA
2016-10-24T14:33:14.198Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:14.198Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:14.198Z - debug: id: 200000000000000000000001
2016-10-24T14:33:14.198Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:14.198Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-24T14:33:14.198Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:14.198Z - debug: Rollen = ["admin"]
2016-10-24T14:33:14.198Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:14.198Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:14.198Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:14.198Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:14.199Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:14.199Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-24T14:33:14.200Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:14.200Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:14.200Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:14.200Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:14.200Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-24T14:33:14.201Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-24T14:33:14.201Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:14.201Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:14.201Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:14.201Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:14.201Z - debug: > FilmeRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-24T14:33:14.201Z - debug: id = 000000000000000000000005
2016-10-24T14:33:14.202Z - debug: > FilmeService.remove(): args = ["000000000000000000000005"]
2016-10-24T14:33:14.203Z - debug: < FilmeService.remove(): result = {}
2016-10-24T14:33:14.203Z - debug: < FilmeRequestHandler.deleteMeth(): result = {}
2016-10-24T14:33:14.203Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-24T14:33:14.203Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:14.203Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:14.203Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.205Z - debug: Response time: 10.084743 ms
2016-10-24T14:33:14.208Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]}
2016-10-24T14:33:14.212Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.212Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:14.212Z - debug: Request: protocol="http"
2016-10-24T14:33:14.212Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.214Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:14.214Z - debug: id = 000000000000000000000005
2016-10-24T14:33:14.214Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.214Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.214Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:14.214Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:14.214Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:14.214Z - debug: Response time: 2.56804 ms
2016-10-24T14:33:14.215Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:14.215Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:14.215Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:14.219Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:14.219Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-24T14:33:14.220Z - debug: Request: protocol="http"
2016-10-24T14:33:14.220Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:14.222Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:14.222Z - debug: id = 000000000000000000000005
2016-10-24T14:33:14.222Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.222Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:14.222Z - debug: Authorization = Bearer x
2016-10-24T14:33:14.222Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:14.222Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:14.222Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:14.223Z - debug: Response time: 3.401146 ms
2016-10-24T14:33:14.223Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:14.223Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:14.223Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:49.304Z - info: Logging durch Winston ist konfiguriert
2016-10-24T14:33:49.601Z - info: Node v6.7.0
2016-10-24T14:33:49.601Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-24T14:33:49.638Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-24T14:33:49.655Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:49.655Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-24T14:33:49.656Z - debug: Request: protocol="http"
2016-10-24T14:33:49.656Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:49.686Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:49.690Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-24T14:33:49.691Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-24T14:33:49.692Z - debug: body: {"username":"admin","password":"p"}
2016-10-24T14:33:49.692Z - debug: username: admin
2016-10-24T14:33:49.692Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-24T14:33:49.692Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:49.692Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:49.692Z - debug: password: p
2016-10-24T14:33:49.692Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-24T14:33:49.695Z - debug: < IamService.checkPassword(): result = {}
2016-10-24T14:33:49.695Z - debug: < IamService.login(): result = {}
2016-10-24T14:33:49.695Z - debug: < IamRequestHandler.login(): result = {}
2016-10-24T14:33:50.083Z - debug: result: true
2016-10-24T14:33:50.084Z - debug: payload: {"iat":1477319630,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"82b2691c-216a-4cdd-833c-9b69f998eaef","exp":1477406030}
2016-10-24T14:33:50.091Z - debug: Response time: 436.79387299999996 ms
2016-10-24T14:33:50.110Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.111Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.111Z - debug: Request: protocol="http"
2016-10-24T14:33:50.111Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.113Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:50.114Z - debug: queryParams = {}
2016-10-24T14:33:50.114Z - debug: > BuecherService.find(): args = [{}]
2016-10-24T14:33:50.118Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:50.118Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:50.118Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.136Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:50.144Z - debug: Response time: 34.193973 ms
2016-10-24T14:33:50.159Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.160Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.160Z - debug: Request: protocol="http"
2016-10-24T14:33:50.160Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.162Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:50.162Z - debug: id = 000000000000000000000001
2016-10-24T14:33:50.163Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:50.163Z - debug: > BuecherService.findById(): args = ["000000000000000000000001"]
2016-10-24T14:33:50.165Z - debug: < BuecherService.findById(): result = {}
2016-10-24T14:33:50.165Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-24T14:33:50.165Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:50.165Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.169Z - debug: getById(): buch = {"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]}
2016-10-24T14:33:50.170Z - debug: Response time: 10.518923 ms
2016-10-24T14:33:50.176Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.176Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.176Z - debug: Request: protocol="http"
2016-10-24T14:33:50.176Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.178Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:50.178Z - debug: id = 000000000000000000000999
2016-10-24T14:33:50.178Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:50.179Z - debug: > BuecherService.findById(): args = ["000000000000000000000999"]
2016-10-24T14:33:50.179Z - debug: < BuecherService.findById(): result = {}
2016-10-24T14:33:50.179Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-24T14:33:50.179Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:50.179Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.186Z - debug: status = 404
2016-10-24T14:33:50.187Z - debug: Response time: 11.119544999999999 ms
2016-10-24T14:33:50.197Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.197Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.197Z - debug: Request: protocol="http"
2016-10-24T14:33:50.197Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.201Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:50.201Z - debug: queryParams = {"titel":"a"}
2016-10-24T14:33:50.201Z - debug: > BuecherService.find(): args = [{"titel":"a"}]
2016-10-24T14:33:50.202Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:50.202Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:50.202Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.216Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:50.217Z - debug: Response time: 21.143155 ms
2016-10-24T14:33:50.227Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.227Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.227Z - debug: Request: protocol="http"
2016-10-24T14:33:50.227Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.228Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:50.228Z - debug: queryParams = {"titel":"XX"}
2016-10-24T14:33:50.228Z - debug: > BuecherService.find(): args = [{"titel":"XX"}]
2016-10-24T14:33:50.228Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:50.229Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:50.229Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.230Z - debug: getByQuery(): buecher = []
2016-10-24T14:33:50.230Z - debug: status = 404
2016-10-24T14:33:50.231Z - debug: Response time: 4.022741 ms
2016-10-24T14:33:50.236Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.236Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.236Z - debug: Request: protocol="http"
2016-10-24T14:33:50.236Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.237Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:50.237Z - debug: queryParams = {"javascript":"true"}
2016-10-24T14:33:50.238Z - debug: > BuecherService.find(): args = [{"javascript":"true"}]
2016-10-24T14:33:50.238Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:50.238Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:50.238Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.243Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-24T14:33:50.243Z - debug: Response time: 7.713489 ms
2016-10-24T14:33:50.248Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.248Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.248Z - debug: Request: protocol="http"
2016-10-24T14:33:50.248Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.250Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:50.250Z - debug: queryParams = {"csharp":"true"}
2016-10-24T14:33:50.250Z - debug: > BuecherService.find(): args = [{"csharp":"true"}]
2016-10-24T14:33:50.251Z - debug: < BuecherService.find(): result = {}
2016-10-24T14:33:50.251Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:50.251Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.252Z - debug: getByQuery(): buecher = []
2016-10-24T14:33:50.253Z - debug: status = 404
2016-10-24T14:33:50.253Z - debug: Response time: 5.080747 ms
2016-10-24T14:33:50.258Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.258Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:50.258Z - debug: Request: protocol="http"
2016-10-24T14:33:50.259Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.260Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.261Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.261Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.263Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.263Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.263Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.263Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.263Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.264Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.264Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.264Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.264Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.264Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.264Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.265Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.265Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.265Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.265Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.266Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.266Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.266Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.266Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.266Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.266Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.266Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.266Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.266Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.266Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.266Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.266Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.266Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.267Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.267Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.267Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.268Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:50.274Z - debug: Body: {"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1bce1594030618004362","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:50.274Z - debug: > BuecherService.save(): args = [{"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1bce1594030618004362","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-24T14:33:50.275Z - debug: < BuecherService.save(): result = {}
2016-10-24T14:33:50.275Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:50.294Z - debug: sendMail(): {"from":"\"Joe Doe\" <nnvv0011@hs-karlsruhe.de>","to":"joe@doe.mail","subject":"Neues Buch 580e1bce1594030618004362","html":"Das Buch mit dem Titel <strong>Neu</strong> ist angelegt"}
2016-10-24T14:33:50.304Z - debug: post(): location = http://127.0.0.1:8443/buecher/580e1bce1594030618004362
2016-10-24T14:33:50.305Z - debug: Response time: 47.208645999999995 ms
2016-10-24T14:33:50.311Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.312Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "232",
  "connection": "close"
}
2016-10-24T14:33:50.312Z - debug: Request: protocol="http"
2016-10-24T14:33:50.312Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.313Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.313Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.313Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.313Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.313Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.313Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.314Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.314Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.314Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.314Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.314Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.314Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.314Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.314Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.314Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.314Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.314Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.314Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.314Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.314Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.315Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.315Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.315Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.315Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.315Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.315Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.315Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.315Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.315Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.315Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.315Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.316Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.316Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.316Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.316Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:50.317Z - debug: Body: {"titel":"Blabla","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","_id":"580e1bce1594030618004363","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:50.317Z - debug: status = 400
2016-10-24T14:33:50.318Z - debug: Response time: 6.612647 ms
2016-10-24T14:33:50.318Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:50.322Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.322Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "267",
  "connection": "close"
}
2016-10-24T14:33:50.322Z - debug: Request: protocol="http"
2016-10-24T14:33:50.323Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.324Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.324Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.324Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.325Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.325Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.325Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.325Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.325Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.325Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.325Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.326Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.326Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.326Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.326Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.326Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.326Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.326Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.326Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.326Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.326Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.326Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.326Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.326Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.326Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.326Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.326Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.326Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.327Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.327Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.327Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.327Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.327Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.327Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.328Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.328Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:50.329Z - debug: Body: {"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1bce1594030618004364","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:50.329Z - debug: > BuecherService.save(): args = [{"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"580e1bce1594030618004364","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-24T14:33:50.329Z - debug: < BuecherService.save(): result = {}
2016-10-24T14:33:50.329Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-24T14:33:50.333Z - debug: TitelExistsError.constructor(): Der Titel "Alpha" existiert bereits.
2016-10-24T14:33:50.335Z - debug: Response time: 12.631364 ms
2016-10-24T14:33:50.339Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.339Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:50.339Z - debug: Request: protocol="http"
2016-10-24T14:33:50.339Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.341Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.341Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.341Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:50.341Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:50.342Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:50.342Z - debug: Response time: 3.053089 ms
2016-10-24T14:33:50.343Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.343Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.348Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.348Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-24T14:33:50.349Z - debug: Request: protocol="http"
2016-10-24T14:33:50.349Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.350Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.350Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.351Z - debug: Authorization = Bearer x
2016-10-24T14:33:50.351Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.352Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:50.352Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.352Z - debug: Response time: 5.035678 ms
2016-10-24T14:33:50.353Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.353Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.359Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.360Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:50.360Z - debug: Request: protocol="http"
2016-10-24T14:33:50.360Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.361Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.361Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.361Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.361Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.361Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.361Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.361Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.361Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.361Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.361Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.362Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.362Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.362Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.362Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.362Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.362Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.362Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.362Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.362Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.362Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.362Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.362Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.363Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.363Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.363Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.363Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.363Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.363Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.363Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.363Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.363Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.363Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.363Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.364Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.364Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:50.366Z - debug: Body: {"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-24T14:33:50.366Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-24T14:33:50.367Z - debug: < BuecherService.update(): result = {}
2016-10-24T14:33:50.367Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:50.378Z - debug: Response time: 18.692919 ms
2016-10-24T14:33:50.382Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.382Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "296",
  "connection": "close"
}
2016-10-24T14:33:50.383Z - debug: Request: protocol="http"
2016-10-24T14:33:50.383Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.384Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.384Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.384Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.385Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.385Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.385Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.385Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.385Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.385Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.385Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.385Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.385Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.385Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.385Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.385Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.385Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.385Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.385Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.386Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.386Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.386Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.386Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.386Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.386Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.386Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.386Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.386Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.386Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.386Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.386Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.386Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.387Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.387Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.387Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.387Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:50.389Z - debug: Body: {"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-24T14:33:50.389Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-24T14:33:50.390Z - debug: < BuecherService.update(): result = {}
2016-10-24T14:33:50.390Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:50.393Z - debug: IdNotExistsError.constructor(): Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-24T14:33:50.394Z - debug: status = 400, message: Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-24T14:33:50.394Z - debug: Response time: 11.691607999999999 ms
2016-10-24T14:33:50.399Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.399Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "content-type": "application/json",
  "content-length": "272",
  "connection": "close"
}
2016-10-24T14:33:50.400Z - debug: Request: protocol="http"
2016-10-24T14:33:50.400Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.401Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.401Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.401Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.403Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.403Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.403Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.403Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.403Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:50.403Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.403Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:50.403Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.403Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.403Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.404Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.404Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.404Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:50.404Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.404Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.404Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.404Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.404Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:50.404Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.407Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.407Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:50.407Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:50.408Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:50.408Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.410Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:50.410Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.410Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.410Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.412Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:50.412Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.412Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.412Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-24T14:33:50.414Z - debug: Body: {"_id":"000000000000000000000003","titel":"Alpha","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","__v":0,"autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-24T14:33:50.414Z - debug: status = 400, err: {"art":"Die Art eines Buches muss KINDLE oder DRUCKAUSGABE sein","rating":"-1 ist keine gueltige Bewertung","verlag":"Der Verlag eines Buches muss IWI_VERLAG oder HSKA_VERLAG sein","email":"fromNowhere ist keine gueltige Email-Adresse"}
2016-10-24T14:33:50.414Z - debug: Response time: 15.181553999999998 ms
2016-10-24T14:33:50.415Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-24T14:33:50.419Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.419Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:50.419Z - debug: Request: protocol="http"
2016-10-24T14:33:50.419Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.420Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.420Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.420Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:50.420Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:50.420Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:50.420Z - debug: Response time: 1.569828 ms
2016-10-24T14:33:50.420Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.420Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.425Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.425Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-24T14:33:50.425Z - debug: Request: protocol="http"
2016-10-24T14:33:50.425Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.426Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.426Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.426Z - debug: Authorization = Bearer x
2016-10-24T14:33:50.427Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.427Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:50.427Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.427Z - debug: Response time: 2.3364469999999997 ms
2016-10-24T14:33:50.428Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.429Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.441Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.441Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ",
  "connection": "close"
}
2016-10-24T14:33:50.441Z - debug: Request: protocol="http"
2016-10-24T14:33:50.441Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.442Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:50.442Z - debug: id = 000000000000000000000005
2016-10-24T14:33:50.442Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.442Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.442Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzAsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiODJiMjY5MWMtMjE2YS00Y2RkLTgzM2MtOWI2OWY5OThlYWVmIiwiZXhwIjoxNDc3NDA2MDMwfQ.QpwSXNQOOuJ0sL371jRF_ChyuwCCPRWBqt8adqjbklfShlvKndUWZi4l6R2KkQ13ppAX0ABF-EnHBHuTxVVuWr4DqD31Z-Jvn-5LllalKaOTwrQa561P5hElT1JES7Frxiy447KiAM7akbqAsraUGWLnK_87Vd3PeHOEN_6TdQprVGdBcqrxK5Ff4VrZtXmNsT_VbQtqyJt86GvKmzp0Dd7HC95OecHqcMlA2jwCea2MHs9_suoyHgUFOvKAPI1t1T4OeTqQUf11QU6Trba4J7Zn_txt5Cseo_lLOmN7yqFi5nlcpV2kFYSIEja1ujm7Mkayyzhq8VKjYASLMtjvaQ
2016-10-24T14:33:50.443Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.443Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.443Z - debug: id: 200000000000000000000001
2016-10-24T14:33:50.443Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:50.443Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-24T14:33:50.443Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:50.443Z - debug: Rollen = ["admin"]
2016-10-24T14:33:50.443Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:50.443Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:50.444Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:50.444Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:50.444Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:50.444Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-24T14:33:50.444Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:50.444Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:50.444Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:50.444Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:50.444Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-24T14:33:50.444Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-24T14:33:50.444Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:50.444Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:50.444Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:50.444Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:50.444Z - debug: > BuecherRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-24T14:33:50.445Z - debug: id = 000000000000000000000005
2016-10-24T14:33:50.445Z - debug: > BuecherService.remove(): args = ["000000000000000000000005"]
2016-10-24T14:33:50.446Z - debug: < BuecherService.remove(): result = {}
2016-10-24T14:33:50.446Z - debug: < BuecherRequestHandler.deleteMeth(): result = {}
2016-10-24T14:33:50.446Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-24T14:33:50.446Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.446Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:50.446Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.448Z - debug: Response time: 7.695194 ms
2016-10-24T14:33:50.451Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]}
2016-10-24T14:33:50.454Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.454Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:50.454Z - debug: Request: protocol="http"
2016-10-24T14:33:50.454Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.455Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:50.455Z - debug: id = 000000000000000000000005
2016-10-24T14:33:50.455Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.455Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.455Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:50.455Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:50.455Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:50.456Z - debug: Response time: 1.6474719999999998 ms
2016-10-24T14:33:50.456Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.456Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:50.456Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:50.461Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:50.461Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-24T14:33:50.461Z - debug: Request: protocol="http"
2016-10-24T14:33:50.461Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:50.462Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:50.462Z - debug: id = 000000000000000000000005
2016-10-24T14:33:50.462Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.462Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:50.462Z - debug: Authorization = Bearer x
2016-10-24T14:33:50.462Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.463Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:50.463Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:50.463Z - debug: Response time: 2.302088 ms
2016-10-24T14:33:50.463Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:50.463Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:50.463Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:51.923Z - info: Logging durch Winston ist konfiguriert
2016-10-24T14:33:52.217Z - info: Node v6.7.0
2016-10-24T14:33:52.217Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-24T14:33:52.256Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-24T14:33:52.270Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.270Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-24T14:33:52.271Z - debug: Request: protocol="http"
2016-10-24T14:33:52.271Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.298Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.301Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-24T14:33:52.301Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-24T14:33:52.302Z - debug: body: {"username":"admin","password":"p"}
2016-10-24T14:33:52.302Z - debug: username: admin
2016-10-24T14:33:52.302Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-24T14:33:52.303Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.303Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.303Z - debug: password: p
2016-10-24T14:33:52.303Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-24T14:33:52.306Z - debug: < IamService.checkPassword(): result = {}
2016-10-24T14:33:52.306Z - debug: < IamService.login(): result = {}
2016-10-24T14:33:52.306Z - debug: < IamRequestHandler.login(): result = {}
2016-10-24T14:33:52.702Z - debug: result: true
2016-10-24T14:33:52.702Z - debug: payload: {"iat":1477319632,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"a0b6734b-bdfb-4b82-84be-1b654c4d596a","exp":1477406032}
2016-10-24T14:33:52.710Z - debug: Response time: 440.80233499999997 ms
2016-10-24T14:33:52.729Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.729Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:52.729Z - debug: Request: protocol="http"
2016-10-24T14:33:52.729Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.732Z - debug: > FilmeRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-24T14:33:52.733Z - debug: queryParams = {}
2016-10-24T14:33:52.733Z - debug: > FilmeService.find(): args = [{}]
2016-10-24T14:33:52.737Z - debug: < FilmeService.find(): result = {}
2016-10-24T14:33:52.738Z - debug: < FilmeRequestHandler.getByQuery(): result = {}
2016-10-24T14:33:52.738Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.757Z - debug: getByQuery(): filme = [{"_id":"000000000000000000000002","titel":"Bad Neighbors","rating":4,"genre":"Komödie","laenge":97,"sprache":"Deutsch","medium":"Blu-Ray","preis":1.99,"ausgeliehen":false,"erscheinungsdatum":"2014-05-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Zac","nachname":"Efron"},{"vorname":"Seth","nachname":"Rogen"},{"vorname":"Dave","nachname":"Franco"}]},{"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]},{"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]},{"_id":"000000000000000000000004","titel":"Interstellar","rating":4.5,"genre":"Sci-Fi","laenge":169,"sprache":"Deutsch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2014-11-06T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Matthew","nachname":"McConaughey"},{"vorname":"Anne","nachname":"Hathaway"},{"vorname":"Jessica","nachname":"Chastain"}]},{"_id":"000000000000000000000003","titel":"Zombieworld","rating":2,"genre":"Horror","laenge":89,"sprache":"Deutsch","medium":"DVD","preis":0.49,"ausgeliehen":false,"erscheinungsdatum":"2010-01-29T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Janette","nachname":"Armand"},{"vorname":"Russell","nachname":"Hodgkinson"}]}]
2016-10-24T14:33:52.765Z - debug: Response time: 36.228324 ms
2016-10-24T14:33:52.780Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.780Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:52.780Z - debug: Request: protocol="http"
2016-10-24T14:33:52.780Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.783Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:52.783Z - debug: id = 000000000000000000000001
2016-10-24T14:33:52.783Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:52.784Z - debug: > FilmeService.findById(): args = ["000000000000000000000001"]
2016-10-24T14:33:52.785Z - debug: < FilmeService.findById(): result = {}
2016-10-24T14:33:52.785Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-24T14:33:52.785Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:52.785Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.790Z - debug: getById(): film = {"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]}
2016-10-24T14:33:52.791Z - debug: Response time: 11.004418 ms
2016-10-24T14:33:52.796Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.797Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:52.797Z - debug: Request: protocol="http"
2016-10-24T14:33:52.797Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.799Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:52.799Z - debug: id = 000000000000000000000999
2016-10-24T14:33:52.799Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-24T14:33:52.800Z - debug: > FilmeService.findById(): args = ["000000000000000000000999"]
2016-10-24T14:33:52.800Z - debug: < FilmeService.findById(): result = {}
2016-10-24T14:33:52.800Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-24T14:33:52.800Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:52.800Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.803Z - debug: status = 404
2016-10-24T14:33:52.804Z - debug: Response time: 7.19185 ms
2016-10-24T14:33:52.810Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.810Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYTBiNjczNGItYmRmYi00YjgyLTg0YmUtMWI2NTRjNGQ1OTZhIiwiZXhwIjoxNDc3NDA2MDMyfQ.GVFKoA9fMGC6US6b-UZEfWxxswm3GWJWpF4b27hBePROy8r0INx171O69pFhpz4KAPHyUa-08v2-kJQGS3-Js8zC_NLYLSohWt5rZxM6Uu7vDI0_8PRl31AH4Tryrh6mO_PwYrLWqSIGQAazvyB-i-kZBXlY3yMvfJAGu7URlaUUX-hI8himiKZJY-JvTtXH7Mwx3VZ8x-S66gj_Oi2DHxL4SNUKfSFSp1L9EyfnWfsZM5kMHGLHALnsOAfFV3Wetsn-ePi5yRlAQmcSJ_KOEoOmn4dfFkvr1KI1f0N-4rJ-_jrrpK5pUmh2VfynCfkExvqk9Wf6N-Hde--xTpLwTw",
  "content-type": "application/json",
  "content-length": "123",
  "connection": "close"
}
2016-10-24T14:33:52.810Z - debug: Request: protocol="http"
2016-10-24T14:33:52.810Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.812Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.812Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.813Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYTBiNjczNGItYmRmYi00YjgyLTg0YmUtMWI2NTRjNGQ1OTZhIiwiZXhwIjoxNDc3NDA2MDMyfQ.GVFKoA9fMGC6US6b-UZEfWxxswm3GWJWpF4b27hBePROy8r0INx171O69pFhpz4KAPHyUa-08v2-kJQGS3-Js8zC_NLYLSohWt5rZxM6Uu7vDI0_8PRl31AH4Tryrh6mO_PwYrLWqSIGQAazvyB-i-kZBXlY3yMvfJAGu7URlaUUX-hI8himiKZJY-JvTtXH7Mwx3VZ8x-S66gj_Oi2DHxL4SNUKfSFSp1L9EyfnWfsZM5kMHGLHALnsOAfFV3Wetsn-ePi5yRlAQmcSJ_KOEoOmn4dfFkvr1KI1f0N-4rJ-_jrrpK5pUmh2VfynCfkExvqk9Wf6N-Hde--xTpLwTw
2016-10-24T14:33:52.815Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:52.815Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.815Z - debug: id: 200000000000000000000001
2016-10-24T14:33:52.815Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:52.816Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-24T14:33:52.816Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:52.816Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-24T14:33:52.816Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:52.817Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:52.817Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:52.818Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:52.818Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.818Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-24T14:33:52.818Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:52.818Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:52.818Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:52.818Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:52.819Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-24T14:33:52.819Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:52.819Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:52.819Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-24T14:33:52.819Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-24T14:33:52.819Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-24T14:33:52.819Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:52.819Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-24T14:33:52.819Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:52.820Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:52.821Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:52.822Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-24T14:33:52.822Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:52.822Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.822Z - debug: > FilmeRequestHandler.post(): args = <RequestResponse>
2016-10-24T14:33:52.827Z - debug: Body: {"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"580e1bd08d1f4d1c8404a733","schauspieler":[]}
2016-10-24T14:33:52.827Z - debug: > FilmeService.save(): args = [{"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"580e1bd08d1f4d1c8404a733","schauspieler":[]}]
2016-10-24T14:33:52.828Z - debug: < FilmeService.save(): result = {}
2016-10-24T14:33:52.828Z - debug: < FilmeRequestHandler.post(): result = {}
2016-10-24T14:33:52.855Z - debug: post(): location = http://127.0.0.1:8443/filme/580e1bd08d1f4d1c8404a733
2016-10-24T14:33:52.856Z - debug: Response time: 46.104231999999996 ms
2016-10-24T14:33:52.865Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.865Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYTBiNjczNGItYmRmYi00YjgyLTg0YmUtMWI2NTRjNGQ1OTZhIiwiZXhwIjoxNDc3NDA2MDMyfQ.GVFKoA9fMGC6US6b-UZEfWxxswm3GWJWpF4b27hBePROy8r0INx171O69pFhpz4KAPHyUa-08v2-kJQGS3-Js8zC_NLYLSohWt5rZxM6Uu7vDI0_8PRl31AH4Tryrh6mO_PwYrLWqSIGQAazvyB-i-kZBXlY3yMvfJAGu7URlaUUX-hI8himiKZJY-JvTtXH7Mwx3VZ8x-S66gj_Oi2DHxL4SNUKfSFSp1L9EyfnWfsZM5kMHGLHALnsOAfFV3Wetsn-ePi5yRlAQmcSJ_KOEoOmn4dfFkvr1KI1f0N-4rJ-_jrrpK5pUmh2VfynCfkExvqk9Wf6N-Hde--xTpLwTw",
  "connection": "close"
}
2016-10-24T14:33:52.865Z - debug: Request: protocol="http"
2016-10-24T14:33:52.865Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.866Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:52.866Z - debug: id = 000000000000000000000005
2016-10-24T14:33:52.866Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.866Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.866Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0NzczMTk2MzIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYTBiNjczNGItYmRmYi00YjgyLTg0YmUtMWI2NTRjNGQ1OTZhIiwiZXhwIjoxNDc3NDA2MDMyfQ.GVFKoA9fMGC6US6b-UZEfWxxswm3GWJWpF4b27hBePROy8r0INx171O69pFhpz4KAPHyUa-08v2-kJQGS3-Js8zC_NLYLSohWt5rZxM6Uu7vDI0_8PRl31AH4Tryrh6mO_PwYrLWqSIGQAazvyB-i-kZBXlY3yMvfJAGu7URlaUUX-hI8himiKZJY-JvTtXH7Mwx3VZ8x-S66gj_Oi2DHxL4SNUKfSFSp1L9EyfnWfsZM5kMHGLHALnsOAfFV3Wetsn-ePi5yRlAQmcSJ_KOEoOmn4dfFkvr1KI1f0N-4rJ-_jrrpK5pUmh2VfynCfkExvqk9Wf6N-Hde--xTpLwTw
2016-10-24T14:33:52.867Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:52.867Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.867Z - debug: id: 200000000000000000000001
2016-10-24T14:33:52.867Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-24T14:33:52.867Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-24T14:33:52.867Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-24T14:33:52.867Z - debug: Rollen = ["admin"]
2016-10-24T14:33:52.867Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-24T14:33:52.867Z - debug: < IamService.isLoggedIn(): result = true
2016-10-24T14:33:52.867Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-24T14:33:52.867Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-24T14:33:52.867Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-24T14:33:52.868Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-24T14:33:52.868Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-24T14:33:52.869Z - debug: > RolesService.findAllRoles()
2016-10-24T14:33:52.869Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-24T14:33:52.869Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-24T14:33:52.869Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-24T14:33:52.869Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-24T14:33:52.869Z - debug: Vorhandene Rolle: admin
2016-10-24T14:33:52.869Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-24T14:33:52.869Z - debug: < IamService.hasAnyRole(): result = true
2016-10-24T14:33:52.870Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-24T14:33:52.870Z - debug: > FilmeRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-24T14:33:52.870Z - debug: id = 000000000000000000000005
2016-10-24T14:33:52.870Z - debug: > FilmeService.remove(): args = ["000000000000000000000005"]
2016-10-24T14:33:52.871Z - debug: < FilmeService.remove(): result = {}
2016-10-24T14:33:52.871Z - debug: < FilmeRequestHandler.deleteMeth(): result = {}
2016-10-24T14:33:52.871Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-24T14:33:52.871Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:52.871Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:52.872Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.874Z - debug: Response time: 9.739362999999999 ms
2016-10-24T14:33:52.877Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]}
2016-10-24T14:33:52.881Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.881Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-24T14:33:52.881Z - debug: Request: protocol="http"
2016-10-24T14:33:52.881Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.883Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:52.883Z - debug: id = 000000000000000000000005
2016-10-24T14:33:52.883Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.883Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.883Z - debug: Kein Header-Field Authorization
2016-10-24T14:33:52.883Z - debug: AuthorizationInvalidError.constructor()
2016-10-24T14:33:52.883Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-24T14:33:52.883Z - debug: Response time: 2.6666559999999997 ms
2016-10-24T14:33:52.884Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:52.884Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:52.884Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-24T14:33:52.888Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-24T14:33:52.888Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-24T14:33:52.888Z - debug: Request: protocol="http"
2016-10-24T14:33:52.888Z - debug: Request: hostname="127.0.0.1"
2016-10-24T14:33:52.890Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-24T14:33:52.891Z - debug: id = 000000000000000000000005
2016-10-24T14:33:52.891Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.891Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-24T14:33:52.891Z - debug: Authorization = Bearer x
2016-10-24T14:33:52.891Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:52.891Z - debug: TokenInvalidError.constructor()
2016-10-24T14:33:52.891Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-24T14:33:52.892Z - debug: Response time: 3.803644 ms
2016-10-24T14:33:52.892Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-24T14:33:52.892Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-24T14:33:52.892Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
