2016-10-31T09:32:54.281Z - info: Logging durch Winston ist konfiguriert
2016-10-31T09:32:54.621Z - info: Node v6.7.0
2016-10-31T09:32:54.621Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-31T09:32:54.659Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-31T09:32:54.674Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:54.675Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-31T09:32:54.675Z - debug: Request: protocol="http"
2016-10-31T09:32:54.675Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:54.703Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:54.706Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-31T09:32:54.706Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-31T09:32:54.707Z - debug: body: {"username":"admin","password":"p"}
2016-10-31T09:32:54.707Z - debug: username: admin
2016-10-31T09:32:54.707Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-31T09:32:54.707Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:54.708Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:54.708Z - debug: password: p
2016-10-31T09:32:54.708Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-31T09:32:54.711Z - debug: < IamService.checkPassword(): result = {}
2016-10-31T09:32:54.711Z - debug: < IamService.login(): result = {}
2016-10-31T09:32:54.711Z - debug: < IamRequestHandler.login(): result = {}
2016-10-31T09:32:55.103Z - debug: result: true
2016-10-31T09:32:55.104Z - debug: payload: {"iat":1477906375,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"bd922053-5ac4-4a50-9354-e7ba0fa29d6d","exp":1477992775}
2016-10-31T09:32:55.111Z - debug: Response time: 437.71209799999997 ms
2016-10-31T09:32:55.132Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.132Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:55.132Z - debug: Request: protocol="http"
2016-10-31T09:32:55.133Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.135Z - debug: > FilmeRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:32:55.136Z - debug: queryParams = {}
2016-10-31T09:32:55.136Z - debug: > FilmeService.find(): args = [{}]
2016-10-31T09:32:55.140Z - debug: < FilmeService.find(): result = {}
2016-10-31T09:32:55.140Z - debug: < FilmeRequestHandler.getByQuery(): result = {}
2016-10-31T09:32:55.140Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.168Z - debug: getByQuery(): filme = [{"_id":"000000000000000000000002","titel":"Bad Neighbors","rating":4,"genre":"KomÃ¶die","laenge":97,"sprache":"Deutsch","medium":"Blu-Ray","preis":1.99,"ausgeliehen":false,"erscheinungsdatum":"2014-05-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Zac","nachname":"Efron"},{"vorname":"Seth","nachname":"Rogen"},{"vorname":"Dave","nachname":"Franco"}]},{"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]},{"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]},{"_id":"000000000000000000000004","titel":"Interstellar","rating":4.5,"genre":"Sci-Fi","laenge":169,"sprache":"Deutsch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2014-11-06T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Matthew","nachname":"McConaughey"},{"vorname":"Anne","nachname":"Hathaway"},{"vorname":"Jessica","nachname":"Chastain"}]},{"_id":"000000000000000000000003","titel":"Zombieworld","rating":2,"genre":"Horror","laenge":89,"sprache":"Deutsch","medium":"DVD","preis":0.49,"ausgeliehen":false,"erscheinungsdatum":"2010-01-29T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Janette","nachname":"Armand"},{"vorname":"Russell","nachname":"Hodgkinson"}]}]
2016-10-31T09:32:55.180Z - debug: Response time: 48.049870999999996 ms
2016-10-31T09:32:55.194Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.194Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:55.194Z - debug: Request: protocol="http"
2016-10-31T09:32:55.194Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.198Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:55.198Z - debug: id = 000000000000000000000001
2016-10-31T09:32:55.198Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:32:55.199Z - debug: > FilmeService.findById(): args = ["000000000000000000000001"]
2016-10-31T09:32:55.200Z - debug: < FilmeService.findById(): result = {}
2016-10-31T09:32:55.200Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-31T09:32:55.200Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:55.200Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.204Z - debug: getById(): film = {"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]}
2016-10-31T09:32:55.205Z - debug: Response time: 11.046382999999999 ms
2016-10-31T09:32:55.211Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.211Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:55.211Z - debug: Request: protocol="http"
2016-10-31T09:32:55.211Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.213Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:55.213Z - debug: id = 000000000000000000000999
2016-10-31T09:32:55.214Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:32:55.214Z - debug: > FilmeService.findById(): args = ["000000000000000000000999"]
2016-10-31T09:32:55.214Z - debug: < FilmeService.findById(): result = {}
2016-10-31T09:32:55.214Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-31T09:32:55.214Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:55.214Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.216Z - debug: status = 404
2016-10-31T09:32:55.217Z - debug: Response time: 5.592581 ms
2016-10-31T09:32:55.222Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.223Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzUsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYmQ5MjIwNTMtNWFjNC00YTUwLTkzNTQtZTdiYTBmYTI5ZDZkIiwiZXhwIjoxNDc3OTkyNzc1fQ.EGDJ-3fyZbwVbFzM_38xvbdpTYlX0Ouy4p9uIwrnfG8TxoR88Pos3XmwPrPAlieH-eseKMLAIB6_Gl4AF6IFTuhY7GgXVEbW3KBtwc-2PwgEqhRS5ncuFKJuuP0mxbefFbDMYBhmS7ORekZ5IgE51NKhsRa59yMSuMIP3NCS7Ci2meA2xQTSr2IoqBGsFDCOkTdhLsKRQrwQCM8tY3Z3xSG3SSjKrvpaMF3XTGvyJCVWjW6R5tFpGbRoRSFsgeOArGkqFg_RLtFIKZeZROSr0RkRJtEM9ArbdhPk46mgAAnvcxBdyuS73QVNn1tIwKNKLMIS-9ZRpGWVpsBqLrNEfA",
  "content-type": "application/json",
  "content-length": "123",
  "connection": "close"
}
2016-10-31T09:32:55.223Z - debug: Request: protocol="http"
2016-10-31T09:32:55.223Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.225Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.225Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.226Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzUsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYmQ5MjIwNTMtNWFjNC00YTUwLTkzNTQtZTdiYTBmYTI5ZDZkIiwiZXhwIjoxNDc3OTkyNzc1fQ.EGDJ-3fyZbwVbFzM_38xvbdpTYlX0Ouy4p9uIwrnfG8TxoR88Pos3XmwPrPAlieH-eseKMLAIB6_Gl4AF6IFTuhY7GgXVEbW3KBtwc-2PwgEqhRS5ncuFKJuuP0mxbefFbDMYBhmS7ORekZ5IgE51NKhsRa59yMSuMIP3NCS7Ci2meA2xQTSr2IoqBGsFDCOkTdhLsKRQrwQCM8tY3Z3xSG3SSjKrvpaMF3XTGvyJCVWjW6R5tFpGbRoRSFsgeOArGkqFg_RLtFIKZeZROSr0RkRJtEM9ArbdhPk46mgAAnvcxBdyuS73QVNn1tIwKNKLMIS-9ZRpGWVpsBqLrNEfA
2016-10-31T09:32:55.228Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:55.229Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:55.229Z - debug: id: 200000000000000000000001
2016-10-31T09:32:55.229Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:32:55.229Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:32:55.229Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:32:55.230Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:32:55.231Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:32:55.231Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:32:55.231Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:32:55.231Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:55.231Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:55.231Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:32:55.231Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:32:55.232Z - debug: > RolesService.findAllRoles()
2016-10-31T09:32:55.232Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:32:55.232Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:32:55.232Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:32:55.232Z - debug: > RolesService.findAllRoles()
2016-10-31T09:32:55.232Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:32:55.232Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:32:55.232Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:32:55.232Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:32:55.233Z - debug: Vorhandene Rolle: admin
2016-10-31T09:32:55.233Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:32:55.233Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:32:55.233Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:32:55.234Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:32:55.234Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:32:55.234Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:55.234Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.235Z - debug: > FilmeRequestHandler.post(): args = <RequestResponse>
2016-10-31T09:32:55.240Z - debug: Body: {"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"58170fc71960631668dc2b1b","schauspieler":[]}
2016-10-31T09:32:55.240Z - debug: > FilmeService.save(): args = [{"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"58170fc71960631668dc2b1b","schauspieler":[]}]
2016-10-31T09:32:55.241Z - debug: < FilmeService.save(): result = {}
2016-10-31T09:32:55.241Z - debug: < FilmeRequestHandler.post(): result = {}
2016-10-31T09:32:55.258Z - debug: post(): location = http://127.0.0.1:8443/filme/58170fc71960631668dc2b1b
2016-10-31T09:32:55.259Z - debug: Response time: 36.391262 ms
2016-10-31T09:32:55.264Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.264Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzUsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYmQ5MjIwNTMtNWFjNC00YTUwLTkzNTQtZTdiYTBmYTI5ZDZkIiwiZXhwIjoxNDc3OTkyNzc1fQ.EGDJ-3fyZbwVbFzM_38xvbdpTYlX0Ouy4p9uIwrnfG8TxoR88Pos3XmwPrPAlieH-eseKMLAIB6_Gl4AF6IFTuhY7GgXVEbW3KBtwc-2PwgEqhRS5ncuFKJuuP0mxbefFbDMYBhmS7ORekZ5IgE51NKhsRa59yMSuMIP3NCS7Ci2meA2xQTSr2IoqBGsFDCOkTdhLsKRQrwQCM8tY3Z3xSG3SSjKrvpaMF3XTGvyJCVWjW6R5tFpGbRoRSFsgeOArGkqFg_RLtFIKZeZROSr0RkRJtEM9ArbdhPk46mgAAnvcxBdyuS73QVNn1tIwKNKLMIS-9ZRpGWVpsBqLrNEfA",
  "connection": "close"
}
2016-10-31T09:32:55.264Z - debug: Request: protocol="http"
2016-10-31T09:32:55.265Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.266Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:55.266Z - debug: id = 000000000000000000000005
2016-10-31T09:32:55.266Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.266Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.266Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzUsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiYmQ5MjIwNTMtNWFjNC00YTUwLTkzNTQtZTdiYTBmYTI5ZDZkIiwiZXhwIjoxNDc3OTkyNzc1fQ.EGDJ-3fyZbwVbFzM_38xvbdpTYlX0Ouy4p9uIwrnfG8TxoR88Pos3XmwPrPAlieH-eseKMLAIB6_Gl4AF6IFTuhY7GgXVEbW3KBtwc-2PwgEqhRS5ncuFKJuuP0mxbefFbDMYBhmS7ORekZ5IgE51NKhsRa59yMSuMIP3NCS7Ci2meA2xQTSr2IoqBGsFDCOkTdhLsKRQrwQCM8tY3Z3xSG3SSjKrvpaMF3XTGvyJCVWjW6R5tFpGbRoRSFsgeOArGkqFg_RLtFIKZeZROSr0RkRJtEM9ArbdhPk46mgAAnvcxBdyuS73QVNn1tIwKNKLMIS-9ZRpGWVpsBqLrNEfA
2016-10-31T09:32:55.267Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:55.267Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:55.267Z - debug: id: 200000000000000000000001
2016-10-31T09:32:55.267Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:32:55.267Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-31T09:32:55.267Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:32:55.267Z - debug: Rollen = ["admin"]
2016-10-31T09:32:55.268Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:32:55.268Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:32:55.268Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:32:55.268Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:55.268Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:55.268Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-31T09:32:55.269Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:32:55.270Z - debug: > RolesService.findAllRoles()
2016-10-31T09:32:55.270Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:32:55.270Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:32:55.271Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-31T09:32:55.271Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-31T09:32:55.271Z - debug: Vorhandene Rolle: admin
2016-10-31T09:32:55.271Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:32:55.271Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:32:55.271Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:32:55.271Z - debug: > FilmeRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-31T09:32:55.272Z - debug: id = 000000000000000000000005
2016-10-31T09:32:55.272Z - debug: > FilmeService.remove(): args = ["000000000000000000000005"]
2016-10-31T09:32:55.274Z - debug: < FilmeService.remove(): result = {}
2016-10-31T09:32:55.274Z - debug: < FilmeRequestHandler.deleteMeth(): result = {}
2016-10-31T09:32:55.274Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-31T09:32:55.274Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:55.274Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:55.274Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.279Z - debug: Response time: 14.526072 ms
2016-10-31T09:32:55.282Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]}
2016-10-31T09:32:55.288Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.288Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:55.288Z - debug: Request: protocol="http"
2016-10-31T09:32:55.289Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.291Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:55.291Z - debug: id = 000000000000000000000005
2016-10-31T09:32:55.291Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.291Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.291Z - debug: Kein Header-Field Authorization
2016-10-31T09:32:55.292Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:32:55.292Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:32:55.292Z - debug: Response time: 4.5595609999999995 ms
2016-10-31T09:32:55.292Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:55.293Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:55.293Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:55.298Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:55.298Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-31T09:32:55.298Z - debug: Request: protocol="http"
2016-10-31T09:32:55.298Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:55.301Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:55.301Z - debug: id = 000000000000000000000005
2016-10-31T09:32:55.301Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.301Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:55.301Z - debug: Authorization = Bearer x
2016-10-31T09:32:55.302Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:32:55.302Z - debug: TokenInvalidError.constructor()
2016-10-31T09:32:55.302Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:32:55.303Z - debug: Response time: 4.646129999999999 ms
2016-10-31T09:32:55.303Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:55.303Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:55.303Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:56.888Z - info: Logging durch Winston ist konfiguriert
2016-10-31T09:32:57.203Z - info: Node v6.7.0
2016-10-31T09:32:57.203Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-31T09:32:57.241Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-31T09:32:57.255Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.256Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-31T09:32:57.256Z - debug: Request: protocol="http"
2016-10-31T09:32:57.256Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.283Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.286Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-31T09:32:57.287Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-31T09:32:57.287Z - debug: body: {"username":"admin","password":"p"}
2016-10-31T09:32:57.288Z - debug: username: admin
2016-10-31T09:32:57.288Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-31T09:32:57.288Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:57.288Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:57.288Z - debug: password: p
2016-10-31T09:32:57.288Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-31T09:32:57.291Z - debug: < IamService.checkPassword(): result = {}
2016-10-31T09:32:57.291Z - debug: < IamService.login(): result = {}
2016-10-31T09:32:57.291Z - debug: < IamRequestHandler.login(): result = {}
2016-10-31T09:32:57.678Z - debug: result: true
2016-10-31T09:32:57.678Z - debug: payload: {"iat":1477906377,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"60782c67-05f1-43a2-8917-c61d0886b7e2","exp":1477992777}
2016-10-31T09:32:57.686Z - debug: Response time: 431.644731 ms
2016-10-31T09:32:57.704Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.704Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:57.705Z - debug: Request: protocol="http"
2016-10-31T09:32:57.705Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.708Z - debug: > KundenRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:32:57.708Z - debug: queryParams = {}
2016-10-31T09:32:57.709Z - debug: > kundenService.find(): args = [{}]
2016-10-31T09:32:57.712Z - debug: < kundenService.find(): result = {}
2016-10-31T09:32:57.712Z - debug: < KundenRequestHandler.getByQuery(): result = {}
2016-10-31T09:32:57.713Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.740Z - debug: getByQuery(): kunden = [{"_id":"000000000000000000000001","name":"Hinz","vorname":"Fabian","geburtstag":"Mon Mar 28 1994 02:00:00 GMT+0200 (MitteleuropÃ¤ische Sommerzeit)","premium":false,"telefonnummer":4917645824076,"__v":0,"adresse":[{"Stadt":"Friedrichshafen","Postleitzahl":"88046","Hausnummer":"36","StraÃe":"Wiggenhauser Weg"}]},{"_id":"000000000000000000000003","name":"Knecht","vorname":"Sarah","geburtstag":"Fri Dec 28 1990 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":false,"telefonnummer":6115428693,"__v":0,"adresse":[{"Stadt":"Eureka","Postleitzahl":"66519","Hausnummer":"12","StraÃe":"SonnenstraÃe"}]},{"_id":"000000000000000000000002","name":"MÃ¼ller","vorname":"Robert","geburtstag":"Fri Dec 22 1995 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":true,"telefonnummer":4915253945571,"__v":0,"adresse":[{"Stadt":"Karlsruhe","Postleitzahl":"76185","Hausnummer":"11","StraÃe":"Lindenplatz"}]},{"_id":"000000000000000000000004","name":"MÃ¼ller","vorname":"Petra","geburtstag":"Wed Feb 03 1999 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":false,"telefonnummer":10153412432,"__v":0,"adresse":[{"Stadt":"Genesis","Postleitzahl":"12345","Hausnummer":"2","StraÃe":"MerkurstraÃe"}]}]
2016-10-31T09:32:57.749Z - debug: Response time: 45.189993 ms
2016-10-31T09:32:57.762Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.762Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:57.762Z - debug: Request: protocol="http"
2016-10-31T09:32:57.762Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.765Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:57.765Z - debug: id = 000000000000000000000001
2016-10-31T09:32:57.765Z - debug: > KundenRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:32:57.766Z - debug: > kundenService.findById(): args = ["000000000000000000000001"]
2016-10-31T09:32:57.767Z - debug: < kundenService.findById(): result = {}
2016-10-31T09:32:57.767Z - debug: < KundenRequestHandler.getById(): result = {}
2016-10-31T09:32:57.767Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:57.767Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.771Z - debug: getById(): kunde = {"_id":"000000000000000000000001","name":"Hinz","vorname":"Fabian","geburtstag":"Mon Mar 28 1994 02:00:00 GMT+0200 (MitteleuropÃ¤ische Sommerzeit)","premium":false,"telefonnummer":4917645824076,"__v":0,"adresse":[{"Stadt":"Friedrichshafen","Postleitzahl":"88046","Hausnummer":"36","StraÃe":"Wiggenhauser Weg"}]}
2016-10-31T09:32:57.772Z - debug: Response time: 10.263698999999999 ms
2016-10-31T09:32:57.777Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.777Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:57.777Z - debug: Request: protocol="http"
2016-10-31T09:32:57.777Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.780Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:57.780Z - debug: id = 000000000000000000000999
2016-10-31T09:32:57.780Z - debug: > KundenRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:32:57.780Z - debug: > kundenService.findById(): args = ["000000000000000000000999"]
2016-10-31T09:32:57.781Z - debug: < kundenService.findById(): result = {}
2016-10-31T09:32:57.781Z - debug: < KundenRequestHandler.getById(): result = {}
2016-10-31T09:32:57.781Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:57.781Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.783Z - debug: status = 404
2016-10-31T09:32:57.784Z - debug: Response time: 6.423457 ms
2016-10-31T09:32:57.788Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.788Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjA3ODJjNjctMDVmMS00M2EyLTg5MTctYzYxZDA4ODZiN2UyIiwiZXhwIjoxNDc3OTkyNzc3fQ.SAWb7O56AY25So-S-BesRN7rM9eJlMgGBhQ8F7gxrDIliLSugqkmlMueonvzlqimhfzcB7vcFfZcFyIJqH8CXkghuZbxhydsxPEvtXCCXkqqcVp0JroKKt7atMEZFytuZhJPos3b-HE74FRg95YHnLWEeGgIey6wRUc9BrmZuE_HcoB1hVZSzYToyzZTaV54qV-IpHYfdPJ7ld8VEuevvC421SKuosYWPtwVEwzrKvh6hMxDdupmcW5x_JLxcWi7mV3e9x1ZCt1Lt5RC1b0hKKFXE4enjb8_xskVrXvddX51lFetPvbpv9TYFSvmau-d-QmSbzSa4hRnHWT6jFPJFg",
  "connection": "close"
}
2016-10-31T09:32:57.788Z - debug: Request: protocol="http"
2016-10-31T09:32:57.788Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.792Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:57.792Z - debug: id = 000000000000000000000005
2016-10-31T09:32:57.792Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.792Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.793Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDYzNzcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiNjA3ODJjNjctMDVmMS00M2EyLTg5MTctYzYxZDA4ODZiN2UyIiwiZXhwIjoxNDc3OTkyNzc3fQ.SAWb7O56AY25So-S-BesRN7rM9eJlMgGBhQ8F7gxrDIliLSugqkmlMueonvzlqimhfzcB7vcFfZcFyIJqH8CXkghuZbxhydsxPEvtXCCXkqqcVp0JroKKt7atMEZFytuZhJPos3b-HE74FRg95YHnLWEeGgIey6wRUc9BrmZuE_HcoB1hVZSzYToyzZTaV54qV-IpHYfdPJ7ld8VEuevvC421SKuosYWPtwVEwzrKvh6hMxDdupmcW5x_JLxcWi7mV3e9x1ZCt1Lt5RC1b0hKKFXE4enjb8_xskVrXvddX51lFetPvbpv9TYFSvmau-d-QmSbzSa4hRnHWT6jFPJFg
2016-10-31T09:32:57.795Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:57.795Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:57.795Z - debug: id: 200000000000000000000001
2016-10-31T09:32:57.795Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:32:57.795Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-31T09:32:57.796Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:32:57.797Z - debug: Rollen = ["admin"]
2016-10-31T09:32:57.797Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:32:57.797Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:32:57.797Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:32:57.797Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:32:57.797Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:32:57.797Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-31T09:32:57.797Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:32:57.798Z - debug: > RolesService.findAllRoles()
2016-10-31T09:32:57.798Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:32:57.798Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:32:57.798Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-31T09:32:57.798Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-31T09:32:57.798Z - debug: Vorhandene Rolle: admin
2016-10-31T09:32:57.799Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:32:57.799Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:32:57.799Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:32:57.799Z - debug: > KundenRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-31T09:32:57.799Z - debug: id = 000000000000000000000005
2016-10-31T09:32:57.800Z - debug: > kundenService.remove(): args = ["000000000000000000000005"]
2016-10-31T09:32:57.801Z - debug: < kundenService.remove(): result = {}
2016-10-31T09:32:57.801Z - debug: < KundenRequestHandler.deleteMeth(): result = {}
2016-10-31T09:32:57.801Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-31T09:32:57.801Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:57.801Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:57.801Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.804Z - debug: Response time: 16.584523 ms
2016-10-31T09:32:57.806Z - debug: Geloescht: null
2016-10-31T09:32:57.809Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.809Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:32:57.810Z - debug: Request: protocol="http"
2016-10-31T09:32:57.810Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.810Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:57.811Z - debug: id = 000000000000000000000005
2016-10-31T09:32:57.811Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.811Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.811Z - debug: Kein Header-Field Authorization
2016-10-31T09:32:57.811Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:32:57.811Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:32:57.811Z - debug: Response time: 1.990624 ms
2016-10-31T09:32:57.812Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:57.812Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:57.812Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:32:57.815Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:32:57.815Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-31T09:32:57.815Z - debug: Request: protocol="http"
2016-10-31T09:32:57.815Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:32:57.816Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:32:57.816Z - debug: id = 000000000000000000000005
2016-10-31T09:32:57.816Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.816Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:32:57.816Z - debug: Authorization = Bearer x
2016-10-31T09:32:57.817Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:32:57.818Z - debug: TokenInvalidError.constructor()
2016-10-31T09:32:57.818Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:32:57.818Z - debug: Response time: 3.246758 ms
2016-10-31T09:32:57.818Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:32:57.819Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:32:57.819Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:51.333Z - info: Logging durch Winston ist konfiguriert
2016-10-31T09:36:51.655Z - info: Node v6.7.0
2016-10-31T09:36:51.655Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-31T09:36:51.694Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-31T09:36:51.712Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:51.712Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-31T09:36:51.712Z - debug: Request: protocol="http"
2016-10-31T09:36:51.713Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:51.741Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:51.744Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-31T09:36:51.745Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-31T09:36:51.746Z - debug: body: {"username":"admin","password":"p"}
2016-10-31T09:36:51.746Z - debug: username: admin
2016-10-31T09:36:51.746Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-31T09:36:51.747Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:51.747Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:51.747Z - debug: password: p
2016-10-31T09:36:51.747Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-31T09:36:51.750Z - debug: < IamService.checkPassword(): result = {}
2016-10-31T09:36:51.750Z - debug: < IamService.login(): result = {}
2016-10-31T09:36:51.750Z - debug: < IamRequestHandler.login(): result = {}
2016-10-31T09:36:52.145Z - debug: result: true
2016-10-31T09:36:52.146Z - debug: payload: {"iat":1477906612,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"8c3a3215-4d6e-4000-81c4-27177f604e72","exp":1477993012}
2016-10-31T09:36:52.154Z - debug: Response time: 442.91289 ms
2016-10-31T09:36:52.174Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.174Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.174Z - debug: Request: protocol="http"
2016-10-31T09:36:52.175Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.177Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:52.177Z - debug: queryParams = {}
2016-10-31T09:36:52.177Z - debug: > BuecherService.find(): args = [{}]
2016-10-31T09:36:52.182Z - debug: < BuecherService.find(): result = {}
2016-10-31T09:36:52.182Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:52.182Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.201Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-31T09:36:52.208Z - debug: Response time: 34.159228 ms
2016-10-31T09:36:52.223Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.223Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.223Z - debug: Request: protocol="http"
2016-10-31T09:36:52.223Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.226Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:52.227Z - debug: id = 000000000000000000000001
2016-10-31T09:36:52.227Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:52.227Z - debug: > BuecherService.findById(): args = ["000000000000000000000001"]
2016-10-31T09:36:52.228Z - debug: < BuecherService.findById(): result = {}
2016-10-31T09:36:52.229Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-31T09:36:52.229Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:52.229Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.233Z - debug: getById(): buch = {"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]}
2016-10-31T09:36:52.234Z - debug: Response time: 11.362313 ms
2016-10-31T09:36:52.240Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.240Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.241Z - debug: Request: protocol="http"
2016-10-31T09:36:52.241Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.243Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:52.243Z - debug: id = 000000000000000000000999
2016-10-31T09:36:52.243Z - debug: > BuecherRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:52.243Z - debug: > BuecherService.findById(): args = ["000000000000000000000999"]
2016-10-31T09:36:52.243Z - debug: < BuecherService.findById(): result = {}
2016-10-31T09:36:52.243Z - debug: < BuecherRequestHandler.getById(): result = {}
2016-10-31T09:36:52.243Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:52.243Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.245Z - debug: status = 404
2016-10-31T09:36:52.246Z - debug: Response time: 5.74519 ms
2016-10-31T09:36:52.253Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.253Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.254Z - debug: Request: protocol="http"
2016-10-31T09:36:52.254Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.256Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:52.256Z - debug: queryParams = {"titel":"a"}
2016-10-31T09:36:52.257Z - debug: > BuecherService.find(): args = [{"titel":"a"}]
2016-10-31T09:36:52.257Z - debug: < BuecherService.find(): result = {}
2016-10-31T09:36:52.258Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:52.258Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.269Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000002","titel":"Beta","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":22.2,"rabatt":0.022,"lieferbar":true,"datum":"2015-02-02T00:00:00.000Z","email":"beta@hska.de","__v":0,"autoren":[{"vorname":"Brunhilde","nachname":"Beta"}],"schlagwoerter":["TYPESCRIPT"]},{"_id":"000000000000000000000004","titel":"Delta","rating":3,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":44.4,"rabatt":0.044,"lieferbar":true,"datum":"2015-02-04T00:00:00.000Z","email":"delta@hska.de","__v":0,"autoren":[{"vorname":"Dieter","nachname":"Delta"}],"schlagwoerter":[]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-31T09:36:52.271Z - debug: Response time: 18.164618 ms
2016-10-31T09:36:52.282Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.283Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.283Z - debug: Request: protocol="http"
2016-10-31T09:36:52.283Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.284Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:52.285Z - debug: queryParams = {"titel":"XX"}
2016-10-31T09:36:52.285Z - debug: > BuecherService.find(): args = [{"titel":"XX"}]
2016-10-31T09:36:52.285Z - debug: < BuecherService.find(): result = {}
2016-10-31T09:36:52.285Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:52.285Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.287Z - debug: getByQuery(): buecher = []
2016-10-31T09:36:52.287Z - debug: status = 404
2016-10-31T09:36:52.287Z - debug: Response time: 4.9290389999999995 ms
2016-10-31T09:36:52.297Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.297Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.297Z - debug: Request: protocol="http"
2016-10-31T09:36:52.297Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.298Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:52.298Z - debug: queryParams = {"javascript":"true"}
2016-10-31T09:36:52.298Z - debug: > BuecherService.find(): args = [{"javascript":"true"}]
2016-10-31T09:36:52.299Z - debug: < BuecherService.find(): result = {}
2016-10-31T09:36:52.299Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:52.299Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.302Z - debug: getByQuery(): buecher = [{"_id":"000000000000000000000001","titel":"Alpha","rating":4,"art":"DRUCKAUSGABE","verlag":"IWI_VERLAG","preis":11.1,"rabatt":0.011,"lieferbar":true,"datum":"2015-02-01T00:00:00.000Z","email":"alpha@hska.de","__v":0,"autoren":[{"vorname":"Adriana","nachname":"Alpha"},{"vorname":"Alfred","nachname":"Alpha"}],"schlagwoerter":["JAVASCRIPT"]},{"_id":"000000000000000000000003","titel":"Gamma","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2015-02-03T00:00:00.000Z","email":"gamma@hska.de","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":["JAVASCRIPT","TYPESCRIPT"]}]
2016-10-31T09:36:52.303Z - debug: Response time: 6.030330999999999 ms
2016-10-31T09:36:52.308Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.308Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.308Z - debug: Request: protocol="http"
2016-10-31T09:36:52.308Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.311Z - debug: > BuecherRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:52.311Z - debug: queryParams = {"csharp":"true"}
2016-10-31T09:36:52.311Z - debug: > BuecherService.find(): args = [{"csharp":"true"}]
2016-10-31T09:36:52.312Z - debug: < BuecherService.find(): result = {}
2016-10-31T09:36:52.312Z - debug: < BuecherRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:52.312Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.314Z - debug: getByQuery(): buecher = []
2016-10-31T09:36:52.314Z - debug: status = 404
2016-10-31T09:36:52.314Z - debug: Response time: 6.480129 ms
2016-10-31T09:36:52.321Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.321Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-31T09:36:52.321Z - debug: Request: protocol="http"
2016-10-31T09:36:52.321Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.322Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.322Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.323Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.325Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.325Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.325Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.325Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.325Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.326Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.326Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.326Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.326Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.326Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.326Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.327Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.327Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.327Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.328Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.328Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.328Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.328Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.328Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.328Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.328Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.328Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.328Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.328Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.329Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.329Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.329Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.329Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.330Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.330Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.330Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.331Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-31T09:36:52.337Z - debug: Body: {"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"581710b40ff41b1d54aef3bd","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-31T09:36:52.337Z - debug: > BuecherService.save(): args = [{"titel":"Neu","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"581710b40ff41b1d54aef3bd","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-31T09:36:52.338Z - debug: < BuecherService.save(): result = {}
2016-10-31T09:36:52.338Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-31T09:36:52.356Z - debug: sendMail(): {"from":"\"Joe Doe\" <nnvv0011@hs-karlsruhe.de>","to":"joe@doe.mail","subject":"Neues Buch 581710b40ff41b1d54aef3bd","html":"Das Buch mit dem Titel <strong>Neu</strong> ist angelegt"}
2016-10-31T09:36:52.370Z - debug: post(): location = http://127.0.0.1:8443/buecher/581710b40ff41b1d54aef3bd
2016-10-31T09:36:52.370Z - debug: Response time: 50.174363 ms
2016-10-31T09:36:52.377Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.377Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "232",
  "connection": "close"
}
2016-10-31T09:36:52.377Z - debug: Request: protocol="http"
2016-10-31T09:36:52.377Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.379Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.379Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.379Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.380Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.380Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.380Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.380Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.380Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.380Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.380Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.380Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.380Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.381Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.381Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.381Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.381Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.381Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.381Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.381Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.381Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.381Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.381Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.381Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.381Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.381Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.381Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.381Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.381Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.381Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.382Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.382Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.382Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.382Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.382Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.382Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-31T09:36:52.384Z - debug: Body: {"titel":"Blabla","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","_id":"581710b40ff41b1d54aef3be","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-31T09:36:52.384Z - debug: status = 400
2016-10-31T09:36:52.384Z - debug: Response time: 7.510024 ms
2016-10-31T09:36:52.384Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-31T09:36:52.392Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.392Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "267",
  "connection": "close"
}
2016-10-31T09:36:52.392Z - debug: Request: protocol="http"
2016-10-31T09:36:52.393Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.394Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.394Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.394Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.394Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.394Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.394Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.394Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.395Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.395Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.395Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.395Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.395Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.395Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.395Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.395Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.395Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.395Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.395Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.395Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.395Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.396Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.396Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.396Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.396Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.396Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.396Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.396Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.396Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.397Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.397Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.397Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.397Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.397Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.397Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.398Z - debug: > BuecherRequestHandler.post(): args = <RequestResponse>
2016-10-31T09:36:52.398Z - debug: Body: {"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"581710b40ff41b1d54aef3bf","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-31T09:36:52.399Z - debug: > BuecherService.save(): args = [{"titel":"Alpha","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":99.9,"rabatt":0.099,"lieferbar":true,"datum":"2016-02-28T00:00:00.000Z","email":"theo@test.de","_id":"581710b40ff41b1d54aef3bf","autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}]
2016-10-31T09:36:52.399Z - debug: < BuecherService.save(): result = {}
2016-10-31T09:36:52.399Z - debug: < BuecherRequestHandler.post(): result = {}
2016-10-31T09:36:52.401Z - debug: TitelExistsError.constructor(): Der Titel "Alpha" existiert bereits.
2016-10-31T09:36:52.402Z - debug: Response time: 10.762134999999999 ms
2016-10-31T09:36:52.407Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.408Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-31T09:36:52.408Z - debug: Request: protocol="http"
2016-10-31T09:36:52.408Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.409Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.409Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.410Z - debug: Kein Header-Field Authorization
2016-10-31T09:36:52.410Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:36:52.410Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:36:52.410Z - debug: Response time: 2.6175759999999997 ms
2016-10-31T09:36:52.411Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.411Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.415Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.416Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "265",
  "connection": "close"
}
2016-10-31T09:36:52.417Z - debug: Request: protocol="http"
2016-10-31T09:36:52.417Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.418Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.418Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.419Z - debug: Authorization = Bearer x
2016-10-31T09:36:52.419Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.419Z - debug: TokenInvalidError.constructor()
2016-10-31T09:36:52.419Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.419Z - debug: Response time: 3.890666 ms
2016-10-31T09:36:52.420Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.420Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.425Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.425Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-31T09:36:52.425Z - debug: Request: protocol="http"
2016-10-31T09:36:52.425Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.426Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.426Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.426Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.426Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.426Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.426Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.426Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.427Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.427Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.427Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.427Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.427Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.427Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.427Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.427Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.427Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.427Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.427Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.428Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.428Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.428Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.428Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.428Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.428Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.428Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.428Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.428Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.428Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.428Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.428Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.428Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.429Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.429Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.429Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.429Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-31T09:36:52.431Z - debug: Body: {"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-31T09:36:52.432Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000003","titel":"Geaendert","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-31T09:36:52.432Z - debug: < BuecherService.update(): result = {}
2016-10-31T09:36:52.432Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-31T09:36:52.444Z - debug: Response time: 19.072247 ms
2016-10-31T09:36:52.448Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.449Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "296",
  "connection": "close"
}
2016-10-31T09:36:52.449Z - debug: Request: protocol="http"
2016-10-31T09:36:52.449Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.450Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.450Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.450Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.451Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.451Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.451Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.451Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.451Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.451Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.451Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.451Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.451Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.452Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.452Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.452Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.452Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.452Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.452Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.452Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.452Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.452Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.452Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.452Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.452Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.452Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.453Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.453Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.453Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.453Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.453Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.453Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.453Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.453Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.453Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.453Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-31T09:36:52.455Z - debug: Body: {"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}
2016-10-31T09:36:52.456Z - debug: > BuecherService.update(): args = [{"_id":"000000000000000000000999","titel":"Nichtvorhanden","rating":1,"art":"DRUCKAUSGABE","verlag":"HSKA_VERLAG","preis":33.3,"rabatt":0.033,"lieferbar":true,"datum":"2016-02-03T00:00:00.000Z","__v":0,"autoren":[{"vorname":"Claus","nachname":"Gamma"}],"schlagwoerter":[]}]
2016-10-31T09:36:52.456Z - debug: < BuecherService.update(): result = {}
2016-10-31T09:36:52.456Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-31T09:36:52.461Z - debug: IdNotExistsError.constructor(): Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-31T09:36:52.461Z - debug: status = 400, message: Es gibt kein Buch mit der ID "000000000000000000000999"
2016-10-31T09:36:52.462Z - debug: Response time: 13.374355999999999 ms
2016-10-31T09:36:52.469Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.469Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "content-type": "application/json",
  "content-length": "272",
  "connection": "close"
}
2016-10-31T09:36:52.469Z - debug: Request: protocol="http"
2016-10-31T09:36:52.470Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.471Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.471Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.471Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.471Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.471Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.471Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.471Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.471Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:52.472Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.472Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:52.472Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.472Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.472Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.472Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.472Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.472Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:52.472Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.472Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.472Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.472Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.472Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:52.472Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.474Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.475Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:52.475Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:52.475Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:52.475Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.477Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:52.477Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.477Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.477Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.477Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:52.477Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.477Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.478Z - debug: > BuecherRequestHandler.put(): args = <RequestResponse>
2016-10-31T09:36:52.481Z - debug: Body: {"_id":"000000000000000000000003","titel":"Alpha","rating":-1,"art":"UNSICHTBAR","verlag":"NO_VERLAG","preis":0,"rabatt":0,"lieferbar":true,"datum":"2016-02-01T00:00:00.000Z","email":"fromNowhere","__v":0,"autoren":[{"vorname":"Theo","nachname":"Test"}],"schlagwoerter":[]}
2016-10-31T09:36:52.481Z - debug: status = 400, err: {"art":"Die Art eines Buches muss KINDLE oder DRUCKAUSGABE sein","rating":"-1 ist keine gueltige Bewertung","verlag":"Der Verlag eines Buches muss IWI_VERLAG oder HSKA_VERLAG sein","email":"fromNowhere ist keine gueltige Email-Adresse"}
2016-10-31T09:36:52.481Z - debug: Response time: 12.095912 ms
2016-10-31T09:36:52.481Z - debug: < BuecherRequestHandler.put(): result = {}
2016-10-31T09:36:52.486Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.486Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-31T09:36:52.486Z - debug: Request: protocol="http"
2016-10-31T09:36:52.486Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.487Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.487Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.487Z - debug: Kein Header-Field Authorization
2016-10-31T09:36:52.487Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:36:52.487Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:36:52.488Z - debug: Response time: 1.6715719999999998 ms
2016-10-31T09:36:52.488Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.488Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.492Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.493Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "291",
  "connection": "close"
}
2016-10-31T09:36:52.493Z - debug: Request: protocol="http"
2016-10-31T09:36:52.493Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.494Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.494Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.494Z - debug: Authorization = Bearer x
2016-10-31T09:36:52.494Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.494Z - debug: TokenInvalidError.constructor()
2016-10-31T09:36:52.494Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.494Z - debug: Response time: 1.631857 ms
2016-10-31T09:36:52.496Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.496Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.509Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.509Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg",
  "connection": "close"
}
2016-10-31T09:36:52.509Z - debug: Request: protocol="http"
2016-10-31T09:36:52.509Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.510Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:52.510Z - debug: id = 000000000000000000000005
2016-10-31T09:36:52.510Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.511Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.511Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOGMzYTMyMTUtNGQ2ZS00MDAwLTgxYzQtMjcxNzdmNjA0ZTcyIiwiZXhwIjoxNDc3OTkzMDEyfQ.CE6kEJJ19FWEy4IOjcnsgNYF-9B11Eypr_sIn0xfXxYeDA_jranr7KGbUi1DogMIFB9L32bLAnu8vgqetkDuvlZF3uBbZfVH3ktk42OlLxovz2PGA5GRxJWflQ9REDZqkYIQhDKi2RqcOf-7SBywJpCFvBJcLfP6HagAGzEUaoRYllIIdB4cLPeU9LuxrleLLb-LcWnaYKZb1CXho7EQbd2LWzO-SEYKpuG957boVvMCSR0DLutFAxr6mVgA47ILKPbToHB8jLoRrS5tcN4z7hT4d2An3qaG9poT61i4iJ76t8tdug8o4VsxP1scuzsF3iGZFaUlhbBmEGHuwwx7sg
2016-10-31T09:36:52.511Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.511Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.511Z - debug: id: 200000000000000000000001
2016-10-31T09:36:52.511Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:52.511Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-31T09:36:52.511Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:52.512Z - debug: Rollen = ["admin"]
2016-10-31T09:36:52.512Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:52.512Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:52.512Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:52.512Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:52.512Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:52.512Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-31T09:36:52.512Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:52.512Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:52.512Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:52.513Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:52.513Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-31T09:36:52.513Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-31T09:36:52.513Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:52.513Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:52.513Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:52.513Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:52.513Z - debug: > BuecherRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-31T09:36:52.513Z - debug: id = 000000000000000000000005
2016-10-31T09:36:52.513Z - debug: > BuecherService.remove(): args = ["000000000000000000000005"]
2016-10-31T09:36:52.514Z - debug: < BuecherService.remove(): result = {}
2016-10-31T09:36:52.514Z - debug: < BuecherRequestHandler.deleteMeth(): result = {}
2016-10-31T09:36:52.514Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-31T09:36:52.514Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.514Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:52.514Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.517Z - debug: Response time: 7.711272999999999 ms
2016-10-31T09:36:52.520Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Epsilon","rating":2,"art":"KINDLE","verlag":"HSKA_VERLAG","preis":55.5,"rabatt":0.055,"lieferbar":true,"datum":"2015-02-05T00:00:00.000Z","email":"epsilon@hska.de","__v":0,"autoren":[{"vorname":"Elfriede","nachname":"Epsilon"}],"schlagwoerter":["TYPESCRIPT"]}
2016-10-31T09:36:52.523Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.523Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:52.523Z - debug: Request: protocol="http"
2016-10-31T09:36:52.523Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.524Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:52.524Z - debug: id = 000000000000000000000005
2016-10-31T09:36:52.524Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.524Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.524Z - debug: Kein Header-Field Authorization
2016-10-31T09:36:52.524Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:36:52.524Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:36:52.525Z - debug: Response time: 1.5417189999999998 ms
2016-10-31T09:36:52.525Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.525Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:52.525Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:52.530Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:52.530Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-31T09:36:52.530Z - debug: Request: protocol="http"
2016-10-31T09:36:52.530Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:52.531Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:52.531Z - debug: id = 000000000000000000000005
2016-10-31T09:36:52.531Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.531Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:52.532Z - debug: Authorization = Bearer x
2016-10-31T09:36:52.532Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.532Z - debug: TokenInvalidError.constructor()
2016-10-31T09:36:52.532Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:52.532Z - debug: Response time: 2.3279739999999998 ms
2016-10-31T09:36:52.532Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:52.532Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:52.532Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.025Z - info: Logging durch Winston ist konfiguriert
2016-10-31T09:36:54.336Z - info: Node v6.7.0
2016-10-31T09:36:54.337Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-31T09:36:54.374Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-31T09:36:54.389Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.390Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-31T09:36:54.390Z - debug: Request: protocol="http"
2016-10-31T09:36:54.390Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.417Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.420Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-31T09:36:54.421Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-31T09:36:54.421Z - debug: body: {"username":"admin","password":"p"}
2016-10-31T09:36:54.422Z - debug: username: admin
2016-10-31T09:36:54.422Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-31T09:36:54.422Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.422Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.422Z - debug: password: p
2016-10-31T09:36:54.422Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-31T09:36:54.425Z - debug: < IamService.checkPassword(): result = {}
2016-10-31T09:36:54.425Z - debug: < IamService.login(): result = {}
2016-10-31T09:36:54.425Z - debug: < IamRequestHandler.login(): result = {}
2016-10-31T09:36:54.820Z - debug: result: true
2016-10-31T09:36:54.820Z - debug: payload: {"iat":1477906614,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"9b646779-bce5-48f5-89cf-d2adce2b2b53","exp":1477993014}
2016-10-31T09:36:54.828Z - debug: Response time: 439.78527499999996 ms
2016-10-31T09:36:54.848Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.848Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:54.848Z - debug: Request: protocol="http"
2016-10-31T09:36:54.849Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.856Z - debug: > FilmeRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:54.856Z - debug: queryParams = {}
2016-10-31T09:36:54.856Z - debug: > FilmeService.find(): args = [{}]
2016-10-31T09:36:54.861Z - debug: < FilmeService.find(): result = {}
2016-10-31T09:36:54.861Z - debug: < FilmeRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:54.861Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.888Z - debug: getByQuery(): filme = [{"_id":"000000000000000000000002","titel":"Bad Neighbors","rating":4,"genre":"KomÃ¶die","laenge":97,"sprache":"Deutsch","medium":"Blu-Ray","preis":1.99,"ausgeliehen":false,"erscheinungsdatum":"2014-05-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Zac","nachname":"Efron"},{"vorname":"Seth","nachname":"Rogen"},{"vorname":"Dave","nachname":"Franco"}]},{"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]},{"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]},{"_id":"000000000000000000000004","titel":"Interstellar","rating":4.5,"genre":"Sci-Fi","laenge":169,"sprache":"Deutsch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2014-11-06T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Matthew","nachname":"McConaughey"},{"vorname":"Anne","nachname":"Hathaway"},{"vorname":"Jessica","nachname":"Chastain"}]},{"_id":"000000000000000000000003","titel":"Zombieworld","rating":2,"genre":"Horror","laenge":89,"sprache":"Deutsch","medium":"DVD","preis":0.49,"ausgeliehen":false,"erscheinungsdatum":"2010-01-29T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Janette","nachname":"Armand"},{"vorname":"Russell","nachname":"Hodgkinson"}]}]
2016-10-31T09:36:54.899Z - debug: Response time: 51.205597999999995 ms
2016-10-31T09:36:54.913Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.914Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:54.914Z - debug: Request: protocol="http"
2016-10-31T09:36:54.914Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.917Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:54.917Z - debug: id = 000000000000000000000001
2016-10-31T09:36:54.917Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:54.918Z - debug: > FilmeService.findById(): args = ["000000000000000000000001"]
2016-10-31T09:36:54.919Z - debug: < FilmeService.findById(): result = {}
2016-10-31T09:36:54.919Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-31T09:36:54.919Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:54.919Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.923Z - debug: getById(): film = {"_id":"000000000000000000000001","titel":"Batman vs Superman","rating":3,"genre":"Action","laenge":183,"sprache":"Englisch","medium":"Blu-Ray","preis":2.49,"ausgeliehen":true,"erscheinungsdatum":"2016-03-24T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Ben","nachname":"Affleck"},{"vorname":"Henry","nachname":"Cavill"},{"vorname":"Gal","nachname":"Gadot"}]}
2016-10-31T09:36:54.924Z - debug: Response time: 10.649685999999999 ms
2016-10-31T09:36:54.931Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.931Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:54.931Z - debug: Request: protocol="http"
2016-10-31T09:36:54.931Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.933Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:54.933Z - debug: id = 000000000000000000000999
2016-10-31T09:36:54.933Z - debug: > FilmeRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:54.934Z - debug: > FilmeService.findById(): args = ["000000000000000000000999"]
2016-10-31T09:36:54.934Z - debug: < FilmeService.findById(): result = {}
2016-10-31T09:36:54.934Z - debug: < FilmeRequestHandler.getById(): result = {}
2016-10-31T09:36:54.934Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:54.934Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.936Z - debug: status = 404
2016-10-31T09:36:54.936Z - debug: Response time: 5.410519 ms
2016-10-31T09:36:54.943Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.943Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOWI2NDY3NzktYmNlNS00OGY1LTg5Y2YtZDJhZGNlMmIyYjUzIiwiZXhwIjoxNDc3OTkzMDE0fQ.m9OLRPxK7TUYzAWMwrCXoR7sxGZJggvmIZwA71xB4LGEs3hOEi_6IM77iwu48Mcqou8S8XvpBaYuosEgCNrx6rup-DV5cvjvqTf4o80iseDIZSvFoOX_LpY-iyY4RaaJE0thr_Adiovjh-2nwvZPmp_fKlvY_UCAoLMrkdcoAfwiLGcDs6mAkzV75dDuAm6Buu0S6CSxTbXLGYwmJB9JMnhV3zOR0VCV8ikrm4b4Djp-pNlmb9hzWHfknPLXio6DKGtukLc3_iASFfxr03jPAh7w7ovxOlkDKLLZYEHWf94h2wUTkMi1tuMSndBLoJFQL-adA2NDyrrbonOXf7H5ag",
  "content-type": "application/json",
  "content-length": "123",
  "connection": "close"
}
2016-10-31T09:36:54.943Z - debug: Request: protocol="http"
2016-10-31T09:36:54.943Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.946Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:54.946Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:54.947Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOWI2NDY3NzktYmNlNS00OGY1LTg5Y2YtZDJhZGNlMmIyYjUzIiwiZXhwIjoxNDc3OTkzMDE0fQ.m9OLRPxK7TUYzAWMwrCXoR7sxGZJggvmIZwA71xB4LGEs3hOEi_6IM77iwu48Mcqou8S8XvpBaYuosEgCNrx6rup-DV5cvjvqTf4o80iseDIZSvFoOX_LpY-iyY4RaaJE0thr_Adiovjh-2nwvZPmp_fKlvY_UCAoLMrkdcoAfwiLGcDs6mAkzV75dDuAm6Buu0S6CSxTbXLGYwmJB9JMnhV3zOR0VCV8ikrm4b4Djp-pNlmb9hzWHfknPLXio6DKGtukLc3_iASFfxr03jPAh7w7ovxOlkDKLLZYEHWf94h2wUTkMi1tuMSndBLoJFQL-adA2NDyrrbonOXf7H5ag
2016-10-31T09:36:54.949Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:54.949Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.949Z - debug: id: 200000000000000000000001
2016-10-31T09:36:54.949Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:54.949Z - debug: > IamRequestHandler.isAdminMitarbeiter(): args = <RequestResponse>
2016-10-31T09:36:54.949Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:54.951Z - debug: Rollen = ["admin","mitarbeiter"]
2016-10-31T09:36:54.951Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:54.951Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:54.951Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:54.951Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:54.951Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.951Z - debug: > RolesService.getNormalizedRoles(): args = [["admin","mitarbeiter"]]
2016-10-31T09:36:54.951Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:54.952Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:54.952Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:54.952Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:54.952Z - debug: > RolesService.getNormalizedRole(): args = ["mitarbeiter"]
2016-10-31T09:36:54.952Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:54.952Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:54.952Z - debug: < RolesService.getNormalizedRole(): result = "mitarbeiter"
2016-10-31T09:36:54.952Z - debug: < RolesService.getNormalizedRoles(): result = ["admin","mitarbeiter"]
2016-10-31T09:36:54.952Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin","mitarbeiter"]]
2016-10-31T09:36:54.953Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:54.953Z - debug: Vorhandene Rolle: mitarbeiter
2016-10-31T09:36:54.953Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:54.953Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:54.953Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:54.954Z - debug: < IamRequestHandler.isAdminMitarbeiter(): result = void || undefined
2016-10-31T09:36:54.954Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:54.954Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.955Z - debug: > FilmeRequestHandler.post(): args = <RequestResponse>
2016-10-31T09:36:54.960Z - debug: Body: {"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"581710b61e24671218d70a67","schauspieler":[]}
2016-10-31T09:36:54.960Z - debug: > FilmeService.save(): args = [{"titel":"Neu","rating":1,"genre":"Drama","laenge":118,"sprache":"Deutsch","medium":"DVD","preis":0.99,"ausgeliehen":false,"_id":"581710b61e24671218d70a67","schauspieler":[]}]
2016-10-31T09:36:54.961Z - debug: < FilmeService.save(): result = {}
2016-10-31T09:36:54.961Z - debug: < FilmeRequestHandler.post(): result = {}
2016-10-31T09:36:54.977Z - debug: post(): location = http://127.0.0.1:8443/filme/581710b61e24671218d70a67
2016-10-31T09:36:54.978Z - debug: Response time: 35.273906 ms
2016-10-31T09:36:54.984Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:54.984Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOWI2NDY3NzktYmNlNS00OGY1LTg5Y2YtZDJhZGNlMmIyYjUzIiwiZXhwIjoxNDc3OTkzMDE0fQ.m9OLRPxK7TUYzAWMwrCXoR7sxGZJggvmIZwA71xB4LGEs3hOEi_6IM77iwu48Mcqou8S8XvpBaYuosEgCNrx6rup-DV5cvjvqTf4o80iseDIZSvFoOX_LpY-iyY4RaaJE0thr_Adiovjh-2nwvZPmp_fKlvY_UCAoLMrkdcoAfwiLGcDs6mAkzV75dDuAm6Buu0S6CSxTbXLGYwmJB9JMnhV3zOR0VCV8ikrm4b4Djp-pNlmb9hzWHfknPLXio6DKGtukLc3_iASFfxr03jPAh7w7ovxOlkDKLLZYEHWf94h2wUTkMi1tuMSndBLoJFQL-adA2NDyrrbonOXf7H5ag",
  "connection": "close"
}
2016-10-31T09:36:54.984Z - debug: Request: protocol="http"
2016-10-31T09:36:54.984Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:54.985Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:54.986Z - debug: id = 000000000000000000000005
2016-10-31T09:36:54.986Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:54.986Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:54.986Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTQsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiOWI2NDY3NzktYmNlNS00OGY1LTg5Y2YtZDJhZGNlMmIyYjUzIiwiZXhwIjoxNDc3OTkzMDE0fQ.m9OLRPxK7TUYzAWMwrCXoR7sxGZJggvmIZwA71xB4LGEs3hOEi_6IM77iwu48Mcqou8S8XvpBaYuosEgCNrx6rup-DV5cvjvqTf4o80iseDIZSvFoOX_LpY-iyY4RaaJE0thr_Adiovjh-2nwvZPmp_fKlvY_UCAoLMrkdcoAfwiLGcDs6mAkzV75dDuAm6Buu0S6CSxTbXLGYwmJB9JMnhV3zOR0VCV8ikrm4b4Djp-pNlmb9hzWHfknPLXio6DKGtukLc3_iASFfxr03jPAh7w7ovxOlkDKLLZYEHWf94h2wUTkMi1tuMSndBLoJFQL-adA2NDyrrbonOXf7H5ag
2016-10-31T09:36:54.986Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:54.986Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.986Z - debug: id: 200000000000000000000001
2016-10-31T09:36:54.986Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:54.987Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-31T09:36:54.987Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:54.987Z - debug: Rollen = ["admin"]
2016-10-31T09:36:54.987Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:54.987Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:54.987Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:54.987Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:54.987Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:54.987Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-31T09:36:54.988Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:54.988Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:54.988Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:54.988Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:54.989Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-31T09:36:54.989Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-31T09:36:54.989Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:54.989Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:54.989Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:54.989Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:54.989Z - debug: > FilmeRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-31T09:36:54.990Z - debug: id = 000000000000000000000005
2016-10-31T09:36:54.990Z - debug: > FilmeService.remove(): args = ["000000000000000000000005"]
2016-10-31T09:36:54.991Z - debug: < FilmeService.remove(): result = {}
2016-10-31T09:36:54.991Z - debug: < FilmeRequestHandler.deleteMeth(): result = {}
2016-10-31T09:36:54.991Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-31T09:36:54.991Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:54.991Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:54.991Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:54.994Z - debug: Response time: 10.503323 ms
2016-10-31T09:36:54.998Z - debug: Geloescht: {"_id":"000000000000000000000005","titel":"Der Soldat James Ryan","rating":5,"genre":"Drama","laenge":170,"sprache":"Englisch","medium":"DVD","preis":1.79,"ausgeliehen":true,"erscheinungsdatum":"1998-10-08T00:00:00.000Z","__v":0,"schauspieler":[{"vorname":"Tom","nachname":"Hanks"},{"vorname":"Matt","nachname":"Damon"},{"vorname":"Tom","nachname":"Sizemore"}]}
2016-10-31T09:36:55.002Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:55.002Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:55.002Z - debug: Request: protocol="http"
2016-10-31T09:36:55.002Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:55.004Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:55.004Z - debug: id = 000000000000000000000005
2016-10-31T09:36:55.004Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:55.004Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:55.004Z - debug: Kein Header-Field Authorization
2016-10-31T09:36:55.004Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:36:55.004Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:36:55.004Z - debug: Response time: 2.363225 ms
2016-10-31T09:36:55.005Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:55.005Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:55.005Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:55.010Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:55.010Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-31T09:36:55.010Z - debug: Request: protocol="http"
2016-10-31T09:36:55.010Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:55.012Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:55.012Z - debug: id = 000000000000000000000005
2016-10-31T09:36:55.013Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:55.013Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:55.013Z - debug: Authorization = Bearer x
2016-10-31T09:36:55.013Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:55.013Z - debug: TokenInvalidError.constructor()
2016-10-31T09:36:55.013Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:55.014Z - debug: Response time: 3.578305 ms
2016-10-31T09:36:55.014Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:55.014Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:55.014Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:56.516Z - info: Logging durch Winston ist konfiguriert
2016-10-31T09:36:56.834Z - info: Node v6.7.0
2016-10-31T09:36:56.834Z - info: Der Server ist gestartet: http://localhost:8443
2016-10-31T09:36:56.872Z - info: Die DB-Verbindung zu "hskadb" ist hergestellt
2016-10-31T09:36:56.887Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:56.888Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
}
2016-10-31T09:36:56.888Z - debug: Request: protocol="http"
2016-10-31T09:36:56.888Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:56.915Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:56.918Z - debug: > IamRequestHandler.login(): args = <RequestResponse>
2016-10-31T09:36:56.919Z - debug: > IamService.login(): args = <RequestResponse>
2016-10-31T09:36:56.920Z - debug: body: {"username":"admin","password":"p"}
2016-10-31T09:36:56.920Z - debug: username: admin
2016-10-31T09:36:56.920Z - debug: > UsersService.findByUsername(): args = ["admin"]
2016-10-31T09:36:56.920Z - debug: < UsersService.findByUsername(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:56.920Z - debug: user: {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:56.921Z - debug: password: p
2016-10-31T09:36:56.921Z - debug: > IamService.checkPassword(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},"p"]
2016-10-31T09:36:56.924Z - debug: < IamService.checkPassword(): result = {}
2016-10-31T09:36:56.924Z - debug: < IamService.login(): result = {}
2016-10-31T09:36:56.924Z - debug: < IamRequestHandler.login(): result = {}
2016-10-31T09:36:57.315Z - debug: result: true
2016-10-31T09:36:57.316Z - debug: payload: {"iat":1477906617,"iss":"https://hska.de/shop/JuergenZimmermann","sub":"200000000000000000000001","jti":"2050988c-b09d-4703-a2e2-6358242e9b3d","exp":1477993017}
2016-10-31T09:36:57.323Z - debug: Response time: 436.820087 ms
2016-10-31T09:36:57.341Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.341Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:57.342Z - debug: Request: protocol="http"
2016-10-31T09:36:57.342Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.348Z - debug: > KundenRequestHandler.getByQuery(): args = <RequestResponse>
2016-10-31T09:36:57.349Z - debug: queryParams = {}
2016-10-31T09:36:57.349Z - debug: > kundenService.find(): args = [{}]
2016-10-31T09:36:57.353Z - debug: < kundenService.find(): result = {}
2016-10-31T09:36:57.353Z - debug: < KundenRequestHandler.getByQuery(): result = {}
2016-10-31T09:36:57.353Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:57.378Z - debug: getByQuery(): kunden = [{"_id":"000000000000000000000001","name":"Hinz","vorname":"Fabian","geburtstag":"Mon Mar 28 1994 02:00:00 GMT+0200 (MitteleuropÃ¤ische Sommerzeit)","premium":false,"telefonnummer":4917645824076,"__v":0,"adresse":[{"Stadt":"Friedrichshafen","Postleitzahl":"88046","Hausnummer":"36","StraÃe":"Wiggenhauser Weg"}]},{"_id":"000000000000000000000003","name":"Knecht","vorname":"Sarah","geburtstag":"Fri Dec 28 1990 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":false,"telefonnummer":6115428693,"__v":0,"adresse":[{"Stadt":"Eureka","Postleitzahl":"66519","Hausnummer":"12","StraÃe":"SonnenstraÃe"}]},{"_id":"000000000000000000000002","name":"MÃ¼ller","vorname":"Robert","geburtstag":"Fri Dec 22 1995 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":true,"telefonnummer":4915253945571,"__v":0,"adresse":[{"Stadt":"Karlsruhe","Postleitzahl":"76185","Hausnummer":"11","StraÃe":"Lindenplatz"}]},{"_id":"000000000000000000000004","name":"MÃ¼ller","vorname":"Petra","geburtstag":"Wed Feb 03 1999 01:00:00 GMT+0100 (MitteleuropÃ¤ische Zeit)","premium":false,"telefonnummer":10153412432,"__v":0,"adresse":[{"Stadt":"Genesis","Postleitzahl":"12345","Hausnummer":"2","StraÃe":"MerkurstraÃe"}]}]
2016-10-31T09:36:57.387Z - debug: Response time: 46.2007 ms
2016-10-31T09:36:57.402Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.402Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:57.402Z - debug: Request: protocol="http"
2016-10-31T09:36:57.402Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.405Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:57.405Z - debug: id = 000000000000000000000001
2016-10-31T09:36:57.405Z - debug: > KundenRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:57.406Z - debug: > kundenService.findById(): args = ["000000000000000000000001"]
2016-10-31T09:36:57.407Z - debug: < kundenService.findById(): result = {}
2016-10-31T09:36:57.407Z - debug: < KundenRequestHandler.getById(): result = {}
2016-10-31T09:36:57.407Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:57.407Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:57.412Z - debug: getById(): kunde = {"_id":"000000000000000000000001","name":"Hinz","vorname":"Fabian","geburtstag":"Mon Mar 28 1994 02:00:00 GMT+0200 (MitteleuropÃ¤ische Sommerzeit)","premium":false,"telefonnummer":4917645824076,"__v":0,"adresse":[{"Stadt":"Friedrichshafen","Postleitzahl":"88046","Hausnummer":"36","StraÃe":"Wiggenhauser Weg"}]}
2016-10-31T09:36:57.412Z - debug: Response time: 10.608186 ms
2016-10-31T09:36:57.418Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.418Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:57.419Z - debug: Request: protocol="http"
2016-10-31T09:36:57.419Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.421Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:57.421Z - debug: id = 000000000000000000000999
2016-10-31T09:36:57.421Z - debug: > KundenRequestHandler.getById(): args = <RequestResponse>
2016-10-31T09:36:57.421Z - debug: > kundenService.findById(): args = ["000000000000000000000999"]
2016-10-31T09:36:57.422Z - debug: < kundenService.findById(): result = {}
2016-10-31T09:36:57.422Z - debug: < KundenRequestHandler.getById(): result = {}
2016-10-31T09:36:57.422Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:57.422Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:57.424Z - debug: status = 404
2016-10-31T09:36:57.424Z - debug: Response time: 6.026314 ms
2016-10-31T09:36:57.430Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.430Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMjA1MDk4OGMtYjA5ZC00NzAzLWEyZTItNjM1ODI0MmU5YjNkIiwiZXhwIjoxNDc3OTkzMDE3fQ.CZ_emnjSmtCao2dzAvH2rkOQ9a4n-c7NoP-Tuf2FWdbwKT4Tgj6_ttVCqKaYi0YVbGxs9zpckVbvwvUAPF8Qy6Rw3xSUbU_t_P7AykdZn4Cgj2k9KuORo7ooBkUF-Vk7IURiXIVr0AQ55d-JvLelWVY5DLRmTUDbRgjvvmzbL8i42UmNGdZ_8bOyRS24GDjQxXZzGkLiCpHYSeKFeTYn_gGg5CncMwZ2Efgt7Tp_1_EIyZK4I-20vIpvSvGXxCuIZNn7-_u1rCcjSpGWsH8J5h0K5iO3W_DCpglRMshjWkkpuFfwcRKWQl61Ol-em3k-H5ReewE0L07bZ4I0tGYFig",
  "connection": "close"
}
2016-10-31T09:36:57.430Z - debug: Request: protocol="http"
2016-10-31T09:36:57.430Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.433Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:57.433Z - debug: id = 000000000000000000000005
2016-10-31T09:36:57.433Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.433Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.434Z - debug: Authorization = Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE0Nzc5MDY2MTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIiwianRpIjoiMjA1MDk4OGMtYjA5ZC00NzAzLWEyZTItNjM1ODI0MmU5YjNkIiwiZXhwIjoxNDc3OTkzMDE3fQ.CZ_emnjSmtCao2dzAvH2rkOQ9a4n-c7NoP-Tuf2FWdbwKT4Tgj6_ttVCqKaYi0YVbGxs9zpckVbvwvUAPF8Qy6Rw3xSUbU_t_P7AykdZn4Cgj2k9KuORo7ooBkUF-Vk7IURiXIVr0AQ55d-JvLelWVY5DLRmTUDbRgjvvmzbL8i42UmNGdZ_8bOyRS24GDjQxXZzGkLiCpHYSeKFeTYn_gGg5CncMwZ2Efgt7Tp_1_EIyZK4I-20vIpvSvGXxCuIZNn7-_u1rCcjSpGWsH8J5h0K5iO3W_DCpglRMshjWkkpuFfwcRKWQl61Ol-em3k-H5ReewE0L07bZ4I0tGYFig
2016-10-31T09:36:57.436Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:57.436Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:57.436Z - debug: id: 200000000000000000000001
2016-10-31T09:36:57.436Z - debug: < IamService.validateJwt(): result = void || undefined
2016-10-31T09:36:57.436Z - debug: > IamRequestHandler.isAdmin(): args = <RequestResponse>
2016-10-31T09:36:57.438Z - debug: > IamRequestHandler.hasRolle(): args = <RequestResponse>
2016-10-31T09:36:57.438Z - debug: Rollen = ["admin"]
2016-10-31T09:36:57.438Z - debug: > IamService.isLoggedIn(): args = <RequestResponse>
2016-10-31T09:36:57.438Z - debug: < IamService.isLoggedIn(): result = true
2016-10-31T09:36:57.438Z - debug: > IamService.hasAnyRole(): args = <RequestResponse>
2016-10-31T09:36:57.439Z - debug: > UsersService.findById(): args = ["200000000000000000000001"]
2016-10-31T09:36:57.439Z - debug: < UsersService.findById(): result = {"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]}
2016-10-31T09:36:57.439Z - debug: > RolesService.getNormalizedRoles(): args = [["admin"]]
2016-10-31T09:36:57.439Z - debug: > RolesService.getNormalizedRole(): args = ["admin"]
2016-10-31T09:36:57.439Z - debug: > RolesService.findAllRoles()
2016-10-31T09:36:57.439Z - debug: < RolesService.findAllRoles(): result = ["admin","mitarbeiter","abteilungsleiter","kunde"]
2016-10-31T09:36:57.440Z - debug: < RolesService.getNormalizedRole(): result = "admin"
2016-10-31T09:36:57.440Z - debug: < RolesService.getNormalizedRoles(): result = ["admin"]
2016-10-31T09:36:57.440Z - debug: > IamService.userHasAnyRole(): args = [{"_id":"200000000000000000000001","username":"admin","password":"$2a$12$50nIBzoTSmFEDGI8nM2iYOO66WNdLKq6Zzhrswo6p1MBmkER5O/CO","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},["admin"]]
2016-10-31T09:36:57.441Z - debug: Vorhandene Rolle: admin
2016-10-31T09:36:57.441Z - debug: < IamService.userHasAnyRole(): result = true
2016-10-31T09:36:57.441Z - debug: < IamService.hasAnyRole(): result = true
2016-10-31T09:36:57.441Z - debug: < IamRequestHandler.hasRolle(): result = true
2016-10-31T09:36:57.441Z - debug: > KundenRequestHandler.deleteMeth(): args = <RequestResponse>
2016-10-31T09:36:57.441Z - debug: id = 000000000000000000000005
2016-10-31T09:36:57.441Z - debug: > kundenService.remove(): args = ["000000000000000000000005"]
2016-10-31T09:36:57.442Z - debug: < kundenService.remove(): result = {}
2016-10-31T09:36:57.442Z - debug: < KundenRequestHandler.deleteMeth(): result = {}
2016-10-31T09:36:57.442Z - debug: < IamRequestHandler.isAdmin(): result = void || undefined
2016-10-31T09:36:57.442Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:57.442Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:57.442Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:57.446Z - debug: Response time: 16.015582 ms
2016-10-31T09:36:57.448Z - debug: Geloescht: null
2016-10-31T09:36:57.451Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.451Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "connection": "close"
}
2016-10-31T09:36:57.452Z - debug: Request: protocol="http"
2016-10-31T09:36:57.452Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.452Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:57.452Z - debug: id = 000000000000000000000005
2016-10-31T09:36:57.453Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.453Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.453Z - debug: Kein Header-Field Authorization
2016-10-31T09:36:57.453Z - debug: AuthorizationInvalidError.constructor()
2016-10-31T09:36:57.453Z - debug: 401: AuthorizationInvalidError, Kein Header-Field Authorization
2016-10-31T09:36:57.453Z - debug: Response time: 1.914766 ms
2016-10-31T09:36:57.454Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:57.454Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:57.454Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
2016-10-31T09:36:57.458Z - debug: > SharedRequestHandler.logRequestHeader(): args = <RequestResponse>
2016-10-31T09:36:57.459Z - debug: Request: headers={
  "host": "127.0.0.1:8443",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/2.2.0",
  "authorization": "Bearer x",
  "connection": "close"
}
2016-10-31T09:36:57.459Z - debug: Request: protocol="http"
2016-10-31T09:36:57.459Z - debug: Request: hostname="127.0.0.1"
2016-10-31T09:36:57.459Z - debug: > SharedRequestHandler.validateMongoId(): args = <RequestResponse>
2016-10-31T09:36:57.460Z - debug: id = 000000000000000000000005
2016-10-31T09:36:57.460Z - debug: > IamRequestHandler.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.460Z - debug: > IamService.validateJwt(): args = <RequestResponse>
2016-10-31T09:36:57.460Z - debug: Authorization = Bearer x
2016-10-31T09:36:57.460Z - debug: Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:57.461Z - debug: TokenInvalidError.constructor()
2016-10-31T09:36:57.461Z - debug: 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen.
2016-10-31T09:36:57.461Z - debug: Response time: 3.0972709999999997 ms
2016-10-31T09:36:57.462Z - debug: < IamRequestHandler.validateJwt(): result = void || undefined
2016-10-31T09:36:57.462Z - debug: < SharedRequestHandler.validateMongoId(): result = void || undefined
2016-10-31T09:36:57.462Z - debug: < SharedRequestHandler.logRequestHeader(): result = void || undefined
